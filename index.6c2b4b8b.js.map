{"mappings":"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,QACA,cACA,gBACA,YACA,kBACA,eACA,kBACA,kBACA,eACA,cACA,aACA,eACA,oBACA,mBACA,UACA,YACA,cACA,aACA,kBACA,UACA,OACA,gBACA,kBACA,kBACA,eACA,iBACA,eACA,gBACA,oBACA,UACA,cACA,YACA,gBACA,OACA,UACA,gBACA,kBACA,oBACA,gBACA,aACA,kBACA,cACA,cACA,iBACA,aACA,cACA,YACA,mBACA,UACA,oBACA,WACA,aACA,iBACA,aACA,WACA,aACA,WACA,SACA,QACA,cACA,cACA,cACA,cACA,oBACA,oBACA,eACA,eACA,gBACA,gBACA,cACA,aACA,kBACA,kBACA,aACA,kBACA,iBACA,YACA,UACA,cACA,kBACA,WACA,UACA,OACA,gBACA,aACA,QACA,SACA,aACA,UACA,YACA,4OClIiB,oBACM,WAEpB,MAAAC,EACHC,WAA0B,KAG1BC,YAAa,EACbC,oBAAAA,GACAC,YAA6B,KAC7BC,gBAAkB,EAClBC,mBAAqB,EAErBte,YAAYue,GACR5e,KAAK4e,cAAgBA,EAGzB5T,YAAY6T,OACHA,cACD7e,KAAKse,WAAa,YAIhBQ,EAAAA,IAAaC,WACnBD,EAAOnN,OAAS,IAAO3R,KAAKse,WAAAA,IAAAA,EAAAA,KAAsBQ,EAAOE,QACzDF,EAAOG,kBAAkBJ,GAG7BK,UACQlf,KAAKue,YAAeve,KAAKse,aAE7Bte,KAAKse,WAAWa,OAAOrc,SAAQ,CAACuR,EAAOjK,WAC7BgV,EAAYpf,KAAKwe,oBAAoBpU,MAEvCgV,GAAa/K,EAAMnR,MAAMM,OAAAA,aACvB5C,EAAOyT,EAAMnR,MAAMkc,GAInBC,EADMC,YAAYpL,OAASlU,KAAKye,aAAe,GAAKze,KAAK2e,mBAC/B,IAAZ/d,EAAKoU,QACrBqK,EAAQ,EAAA,OACF5X,EAAAA,EAAAA,WAAsB7G,EAAKuR,MAE7BkN,EAAQ,KAAKrf,KAAK4e,cAAcnX,EAA0B,IAAhB7G,EAAK+B,SAAiB/B,EAAKQ,UACzEpB,KAAKwe,oBAAoBpU,SAIjCmV,sBAAsBvf,KAAKkf,OAAOhf,KAAKF,Q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","sources":["./src/main.ts","./src/scripts/piano.ts","./src/scripts/notes.ts","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js","./src/scripts/control_panel.ts","./node_modules/soundfont-player/lib/index.js","./node_modules/audio-loader/lib/index.js","./node_modules/audio-loader/lib/base64.js","./node_modules/audio-loader/lib/fetch.js","./node_modules/sample-player/lib/index.js","./node_modules/sample-player/lib/player.js","./node_modules/adsr/index.js","./node_modules/sample-player/lib/events.js","./node_modules/sample-player/lib/notes.js","./node_modules/sample-player/node_modules/note-parser/index.js","./node_modules/sample-player/lib/scheduler.js","./node_modules/sample-player/lib/midi.js","./node_modules/midimessage/dist/index.min.js","./node_modules/soundfont-player/lib/legacy.js","./node_modules/note-parser/index.js","./src/scripts/dom_utils.ts","./src/scripts/instrument_names.ts","./src/scripts/midi_player.ts","./node_modules/@tonejs/midi/build/webpack:/webpack/universalModuleDefinition","./node_modules/@tonejs/midi/build/webpack:/webpack/bootstrap","./node_modules/@tonejs/midi/build/webpack:/src/Header.ts","./node_modules/@tonejs/midi/build/webpack:/node_modules/midi-file/index.js","./node_modules/@tonejs/midi/build/webpack:/src/BinarySearch.ts","./node_modules/@tonejs/midi/build/webpack:/src/Track.ts","./node_modules/@tonejs/midi/build/webpack:/src/ControlChange.ts","./node_modules/@tonejs/midi/build/webpack:/src/Midi.ts","./node_modules/@tonejs/midi/build/webpack:/node_modules/midi-file/lib/midi-parser.js","./node_modules/@tonejs/midi/build/webpack:/node_modules/midi-file/lib/midi-writer.js","./node_modules/@tonejs/midi/build/webpack:/src/Encode.ts","./node_modules/@tonejs/midi/build/webpack:/node_modules/array-flatten/array-flatten.js","./node_modules/@tonejs/midi/build/webpack:/src/ControlChanges.ts","./node_modules/@tonejs/midi/build/webpack:/src/PitchBend.ts","./node_modules/@tonejs/midi/build/webpack:/src/Instrument.ts","./node_modules/@tonejs/midi/build/webpack:/src/InstrumentMaps.ts","./node_modules/@tonejs/midi/build/webpack:/src/Note.ts"],"sourcesContent":["import { Piano } from \"./scripts/piano\";\n\nnew Piano(\"A0\", \"C8\");\n","import { generateNotesFromRange, getNoteName, getOctave, keyBinds } from \"./notes\";\nimport * as Soundfont from \"soundfont-player\";\nimport { ControlPanel } from \"./control_panel\";\nimport { htmlToElement, mainElm } from \"./dom_utils\";\nimport { MidiPlayer } from \"./midi_player\";\n\ninterface IActiveNote {\n    audioNode?: Soundfont.Player;\n    key: HTMLElement;\n}\n\nexport class Piano {\n    activeNoteMap = new Map<string, IActiveNote>();\n    mouseIsDown = false;\n    midiPlayer = new MidiPlayer(this.pressNote.bind(this));\n    controlPanel = new ControlPanel(this.midiPlayer);\n\n    get instrument(): Soundfont.Player | null {\n        return this.controlPanel.instrument;\n    }\n\n    constructor(startNote: string, endNote: string) {\n        window.addEventListener(\"mousedown\", () => {\n            this.mouseIsDown = true;\n        });\n\n        window.addEventListener(\"mouseup\", () => {\n            this.mouseIsDown = false;\n            this.stopAllNotes();\n        });\n\n        window.addEventListener(\"keydown\", (event) => {\n            const note = keyBinds[event.code];\n            if (note) {\n                this.playNote(note);\n\n                if (!event.shiftKey) event.preventDefault();\n            }\n        });\n\n        window.addEventListener(\"keyup\", (event) => {\n            const note = keyBinds[event.code];\n            if (note) this.stopNote(note);\n        });\n\n        this.createDOM(startNote, endNote);\n    }\n\n    playNote(note: string, includeShift = true, velocity = 1): void {\n        if (this.activeNoteMap.has(note)) return;\n\n        const octave = getOctave(note) + (includeShift ? this.controlPanel.octaveShift : 0);\n        const noteReal = getNoteName(note) + octave;\n        const key = document.querySelector<HTMLElement>(`[data-note~=\"${noteReal}\"]`);\n\n        if (key) {\n            key.classList.add(\"pressed\");\n            let node: Soundfont.Player | undefined;\n            if (this.instrument) {\n                node = this.instrument.play(noteReal, undefined, {\n                    gain: this.controlPanel.volume * velocity,\n                });\n            }\n\n            this.activeNoteMap.set(note, { audioNode: node, key });\n        }\n    }\n\n    stopNote(note: string): void {\n        const activeNote = this.activeNoteMap.get(note);\n\n        if (activeNote) {\n            activeNote.key.classList.remove(\"pressed\");\n            this.activeNoteMap.delete(note);\n            if (!this.controlPanel.sustain && this.instrument && activeNote.audioNode) {\n                activeNote.audioNode.stop();\n            }\n        }\n    }\n\n    pressNote(note: string, duration: number, velocity?: number) {\n        this.playNote(note, true, velocity);\n        setTimeout(() => this.stopNote(note), duration);\n    }\n\n    stopAllNotes(): void {\n        const keys = document.querySelectorAll(\".pressed\");\n        keys.forEach((key) => {\n            key.classList.remove(\"pressed\");\n        });\n\n        if (!this.controlPanel.sustain && this.instrument) {\n            this.instrument.stop();\n            this.activeNoteMap.clear();\n        }\n    }\n\n    createDOM(startNote: string, endNote: string): void {\n        const piano = htmlToElement(`<div class=\"piano\"/>`);\n        mainElm.appendChild(piano);\n\n        const { notes, whiteKeys } = generateNotesFromRange(startNote, endNote);\n        piano.style.setProperty(\"--white-keys\", whiteKeys.toString());\n\n        notes.forEach((note) => {\n            const isWhite = getNoteName(note).length === 1;\n            const key = htmlToElement(\n                `<div class=\"key ${isWhite ? \"white\" : \"black\"}\" data-note=\"${note}\"/>`\n            );\n\n            key.onmousedown = () => this.playNote(note, false);\n            key.onmouseup = () => this.stopNote(note);\n            key.onmouseenter = () => this.mouseIsDown && this.playNote(note, false);\n            key.onmouseleave = () => this.stopNote(note);\n\n            piano.appendChild(key);\n        });\n    }\n}\n","export const noteNames = [\"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\"];\n\nexport const keyBinds: { [key: string]: string | undefined } = {\n    Backquote: \"Bb2\",\n    Tab: \"B2\",\n    KeyQ: \"C3\",\n    Digit2: \"Db3\",\n    KeyW: \"D3\",\n    Digit3: \"Eb3\",\n    KeyE: \"E3\",\n    KeyR: \"F3\",\n    Digit5: \"Gb3\",\n    KeyT: \"G3\",\n    Digit6: \"Ab3\",\n    KeyY: \"A3\",\n    Digit7: \"Bb3\",\n    KeyU: \"B3\",\n    KeyI: \"C4\",\n    Digit9: \"Db4\",\n    KeyO: \"D4\",\n    Digit0: \"Eb4\",\n    KeyP: \"E4\",\n    BracketLeft: \"F4\",\n    Equal: \"Gb4\",\n    BracketRight: \"G4\",\n    Backspace: \"Ab4\",\n    Backslash: \"A4\",\n    ShiftLeft: \"A4\",\n    Enter: \"B4\",\n    KeyA: \"Bb4\",\n    KeyZ: \"B4\",\n    KeyX: \"C5\",\n    KeyD: \"Db5\",\n    KeyC: \"D5\",\n    KeyF: \"Eb5\",\n    KeyV: \"E5\",\n    KeyB: \"F5\",\n    KeyH: \"Gb5\",\n    KeyN: \"G5\",\n    KeyJ: \"Ab5\",\n    KeyM: \"A5\",\n    KeyK: \"Bb5\",\n    Comma: \"B5\",\n    Period: \"C6\",\n    Semicolon: \"Db6\",\n    Slash: \"D6\",\n    Quote: \"Eb6\",\n    ShiftRight: \"E6\",\n};\n\nexport function getOctave(note: string): number {\n    return parseInt(note.charAt(note.length - 1));\n}\n\nexport function getNoteName(note: string): string {\n    return note.substring(0, note.length - 1);\n}\n\nexport function generateNotesFromRange(\n    startNote: string,\n    endNote: string\n): { notes: string[]; whiteKeys: number } {\n    const endOctave = getOctave(endNote);\n    const startOctave = getOctave(startNote);\n    const startNoteNameIndex = noteNames.indexOf(getNoteName(startNote));\n    const endNoteNameIndex = noteNames.indexOf(getNoteName(endNote));\n\n    const notes: string[] = [];\n    let whiteKeys = 0;\n    for (let octave = startOctave; octave <= endOctave; octave++) {\n        let noteNameIndex = octave === startOctave ? startNoteNameIndex : 0;\n        while (noteNameIndex < noteNames.length) {\n            const reachedEndNote = octave === endOctave && noteNameIndex > endNoteNameIndex;\n            if (reachedEndNote) break;\n\n            const noteName = noteNames[noteNameIndex];\n            notes.push(noteName + octave);\n            if (noteName.length === 1) whiteKeys++;\n\n            noteNameIndex++;\n        }\n    }\n\n    return { notes, whiteKeys };\n}\n\nexport function midiToNote(midiNote: number) {\n    const octave = Math.floor(midiNote / 12) - 1;\n    const note = noteNames[midiNote % 12];\n    return note + octave;\n}\n","\"use strict\";\n\nexports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {\n    default: a\n  };\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {\n    value: true\n  });\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    } // Skip duplicate re-exports when they have the same value.\n\n\n    if (key in dest && dest[key] === source[key]) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get\n  });\n};","import * as Soundfont from \"soundfont-player\";\nimport { htmlToElement, mainElm } from \"./dom_utils\";\nimport { instrumentNames } from \"./instrument_names\";\nimport { MidiPlayer } from \"./midi_player\";\n\nexport class ControlPanel {\n    private _sustain = false;\n    private _volume = 25;\n    private _octaveShift = 0;\n    private _instrumentName: Soundfont.InstrumentName = \"acoustic_grand_piano\";\n\n    get sustain(): boolean {\n        return this._sustain;\n    }\n\n    set sustain(sustain: boolean) {\n        this._sustain = sustain;\n        this.sustainInput.checked = sustain;\n    }\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(volume: number) {\n        this._volume = volume;\n        this.volumeDisplay.textContent = volume.toString();\n    }\n\n    get octaveShift(): number {\n        return this._octaveShift;\n    }\n\n    set octaveShift(octaveShift: number) {\n        this._octaveShift = octaveShift;\n        this.octaveShiftSelect.value = octaveShift.toString();\n    }\n\n    get instrumentName(): Soundfont.InstrumentName {\n        return this._instrumentName;\n    }\n\n    set instrumentName(name: Soundfont.InstrumentName) {\n        this._instrumentName = name;\n        this.instrument = null;\n        this.instrumentStatus.textContent = \" Loading...\";\n        Soundfont.instrument(this.audioContext, name).then((ins) => {\n            this.instrument = ins;\n            this.instrumentStatus.textContent = \"\";\n        });\n    }\n\n    sustainInput: HTMLInputElement;\n    volumeDisplay: HTMLElement;\n    octaveShiftSelect: HTMLSelectElement;\n    instrumentStatus: HTMLElement;\n    playStopButton: HTMLButtonElement;\n    midiFileInput: HTMLInputElement;\n    panel: HTMLElement;\n\n    audioContext = new AudioContext();\n    instrument: Soundfont.Player | null = null;\n    midiPlayer: MidiPlayer;\n\n    constructor(midiPlayer: MidiPlayer) {\n        this.midiPlayer = midiPlayer;\n        this.panel = htmlToElement(`<div class=\"control-panel\"/>`);\n        mainElm.appendChild(this.panel);\n\n        // sustain control\n        const sustainControl = htmlToElement(`<div><span>Sustain (s): </span></div>`);\n        this.panel.appendChild(sustainControl);\n\n        this.sustainInput = htmlToElement(`<input type=\"checkbox\"></input>`) as HTMLInputElement;\n        this.sustainInput.onchange = () => (this._sustain = this.sustainInput.checked);\n        sustainControl.appendChild(this.sustainInput);\n\n        // octave shift control\n        const octaveShiftControl = htmlToElement(\n            `<div><span>Octave Shift (- ctrl, + alt): </span></div>`\n        );\n        this.panel.appendChild(octaveShiftControl);\n\n        this.octaveShiftSelect = document.createElement(\"select\");\n        this.octaveShiftSelect.onchange = () =>\n            (this._octaveShift = parseInt(this.octaveShiftSelect.value));\n        octaveShiftControl.appendChild(this.octaveShiftSelect);\n\n        for (let i = -3; i <= 3; i++) {\n            const octaveShiftOption = htmlToElement(`<option>${i}</option>`);\n            this.octaveShiftSelect.appendChild(octaveShiftOption);\n        }\n\n        // volume control\n        const volumeControl = htmlToElement(`<div><span>Volume: </span></div>`);\n        this.panel.appendChild(volumeControl);\n\n        const volumeInput = htmlToElement(\n            `<input type=\"range\" min=\"0\" max=\"50\" value=\"${this.volume}\">`\n        ) as HTMLInputElement;\n        volumeInput.onchange = () => (this.volume = parseFloat(volumeInput.value));\n        volumeControl.appendChild(volumeInput);\n\n        this.volumeDisplay = document.createElement(\"span\");\n        volumeControl.appendChild(this.volumeDisplay);\n\n        // instrument control\n        const instrumentControl = htmlToElement(`<div><span>Instrument: </span></div>`);\n        this.panel.appendChild(instrumentControl);\n\n        const instrumentSelect = document.createElement(\"select\");\n        instrumentSelect.onchange = () =>\n            (this.instrumentName = instrumentSelect.value as Soundfont.InstrumentName);\n        instrumentControl.appendChild(instrumentSelect);\n\n        this.instrumentStatus = document.createElement(\"span\");\n        instrumentControl.appendChild(this.instrumentStatus);\n\n        instrumentNames.forEach((name, i) => {\n            const option = htmlToElement(`<option>${name}</option>`);\n            instrumentSelect.appendChild(option);\n            if (name === this._instrumentName) {\n                instrumentSelect.selectedIndex = i;\n            }\n        });\n\n        // midi control\n        const midiControl = htmlToElement(`<div><p>Play a midi file: </p></div>`);\n        this.panel.appendChild(midiControl);\n\n        this.midiFileInput = htmlToElement(`<input type=\"file\"/>`) as HTMLInputElement;\n        this.midiFileInput.onchange = () =>\n            this.midiPlayer.setMidiFile(this.midiFileInput.files?.[0]);\n        midiControl.appendChild(this.midiFileInput);\n        midiControl.appendChild(document.createElement(\"br\"));\n\n        this.playStopButton = htmlToElement(`<button>Play</button>`) as HTMLButtonElement;\n        this.playStopButton.onclick = () => this.playMidi();\n        midiControl.appendChild(this.playStopButton);\n\n        const resetButton = htmlToElement(`<button>Reset</button>`);\n        resetButton.onclick = () => {\n            this.stopMidi();\n            this.midiPlayer.reset();\n        };\n        midiControl.appendChild(resetButton);\n\n        // call the setters\n        this.sustain = this._sustain;\n        this.octaveShift = this._octaveShift;\n        this.volume = this._volume;\n        this.instrumentName = this._instrumentName;\n\n        window.addEventListener(\"keydown\", (event) => {\n            if (event.code === \"KeyS\") {\n                this.sustain = !this.sustain;\n            }\n\n            let newOctaveShift = this.octaveShift;\n            if (event.code === \"ControlLeft\") newOctaveShift -= 1;\n            if (event.code === \"AltLeft\") newOctaveShift += 1;\n\n            if (newOctaveShift !== this.octaveShift) {\n                if (newOctaveShift < -3) newOctaveShift = 3;\n                if (newOctaveShift > 3) newOctaveShift = -3;\n                this.octaveShift = newOctaveShift;\n            }\n        });\n    }\n\n    playMidi() {\n        this.playStopButton.textContent = \"Stop\";\n        this.playStopButton.onclick = () => this.stopMidi();\n        this.midiPlayer.resume();\n    }\n\n    stopMidi() {\n        this.playStopButton.textContent = \"Play\";\n        this.playStopButton.onclick = () => this.playMidi();\n        this.midiPlayer.pause();\n    }\n}\n","'use strict'\n\nvar load = require('audio-loader')\nvar player = require('sample-player')\n\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\nfunction instrument (ac, name, options) {\n  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }\n  var opts = options || {}\n  var isUrl = opts.isSoundfontURL || isSoundfontURL\n  var toUrl = opts.nameToUrl || nameToUrl\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)\n\n  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination)\n    p.url = url\n    p.name = name\n    return p\n  })\n}\n\nfunction isSoundfontURL (name) {\n  return /\\.js(\\?.*)?$/i.test(name)\n}\n\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\nfunction nameToUrl (name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3'\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'\n}\n\n// In the 1.0.0 release it will be:\n// var Soundfont = {}\nvar Soundfont = require('./legacy')\nSoundfont.instrument = instrument\nSoundfont.nameToUrl = nameToUrl\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n","'use strict'\n\nvar base64 = require('./base64')\nvar fetch = require('./fetch')\n\n// Given a regex, return a function that test if against a string\nfunction fromRegex (r) {\n  return function (o) { return typeof o === 'string' && r.test(o) }\n}\n// Try to apply a prefix to a name\nfunction prefix (pre, name) {\n  return typeof pre === 'string' ? pre + name\n    : typeof pre === 'function' ? pre(name)\n    : name\n}\n\n/**\n * Load one or more audio files\n *\n *\n * Possible option keys:\n *\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\n * If is a string it will be prefixed to the name:\n * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`\n * If it's a function it receives the file name and should return the url as string.\n * - __only__ {Array} - when loading objects, if provided, only the given keys\n * will be included in the decoded object:\n * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`\n *\n * @param {AudioContext} ac - the audio context\n * @param {Object} source - the object to be loaded\n * @param {Object} options - (Optional) the load options for that object\n * @param {Object} defaultValue - (Optional) the default value to return as\n * in a promise if not valid loader found\n */\nfunction load (ac, source, options, defVal) {\n  var loader =\n    // Basic audio loading\n      isArrayBuffer(source) ? loadArrayBuffer\n    : isAudioFileName(source) ? loadAudioFile\n    : isPromise(source) ? loadPromise\n    // Compound objects\n    : isArray(source) ? loadArrayData\n    : isObject(source) ? loadObjectData\n    : isJsonFileName(source) ? loadJsonFile\n    // Base64 encoded audio\n    : isBase64Audio(source) ? loadBase64Audio\n    : isJsFileName(source) ? loadMidiJSFile\n    : null\n\n  var opts = options || {}\n  return loader ? loader(ac, source, opts)\n    : defVal ? Promise.resolve(defVal)\n    : Promise.reject('Source not valid (' + source + ')')\n}\nload.fetch = fetch\n\n// BASIC AUDIO LOADING\n// ===================\n\n// Load (decode) an array buffer\nfunction isArrayBuffer (o) { return o instanceof ArrayBuffer }\nfunction loadArrayBuffer (ac, array, options) {\n  return new Promise(function (done, reject) {\n    ac.decodeAudioData(array,\n      function (buffer) { done(buffer) },\n      function () { reject(\"Can't decode audio data (\" + array.slice(0, 30) + '...)') }\n    )\n  })\n}\n\n// Load an audio filename\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i)\nfunction loadAudioFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'arraybuffer'), options)\n}\n\n// Load the result of a promise\nfunction isPromise (o) { return o && typeof o.then === 'function' }\nfunction loadPromise (ac, promise, options) {\n  return promise.then(function (value) {\n    return load(ac, value, options)\n  })\n}\n\n// COMPOUND OBJECTS\n// ================\n\n// Try to load all the items of an array\nvar isArray = Array.isArray\nfunction loadArrayData (ac, array, options) {\n  return Promise.all(array.map(function (data) {\n    return load(ac, data, options, data)\n  }))\n}\n\n// Try to load all the values of a key/value object\nfunction isObject (o) { return o && typeof o === 'object' }\nfunction loadObjectData (ac, obj, options) {\n  var dest = {}\n  var promises = Object.keys(obj).map(function (key) {\n    if (options.only && options.only.indexOf(key) === -1) return null\n    var value = obj[key]\n    return load(ac, value, options, value).then(function (audio) {\n      dest[key] = audio\n    })\n  })\n  return Promise.all(promises).then(function () { return dest })\n}\n\n// Load the content of a JSON file\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i)\nfunction loadJsonFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)\n}\n\n// BASE64 ENCODED FORMATS\n// ======================\n\n// Load strings with Base64 encoded audio\nvar isBase64Audio = fromRegex(/^data:audio/)\nfunction loadBase64Audio (ac, source, options) {\n  var i = source.indexOf(',')\n  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)\n}\n\n// Load .js files with MidiJS soundfont prerendered audio\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i)\nfunction loadMidiJSFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)\n}\n\n// convert a MIDI.js javascript soundfont file to json\nfunction midiJsToJson (data) {\n  var begin = data.indexOf('MIDI.Soundfont.')\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')\n  begin = data.indexOf('=', begin) + 2\n  var end = data.lastIndexOf(',')\n  return JSON.parse(data.slice(begin, end) + '}')\n}\n\nif (typeof module === 'object' && module.exports) module.exports = load\nif (typeof window !== 'undefined') window.loadAudio = load\n","'use strict'\n\n// DECODE UTILITIES\nfunction b64ToUint6 (nChr) {\n  return nChr > 64 && nChr < 91 ? nChr - 65\n    : nChr > 96 && nChr < 123 ? nChr - 71\n    : nChr > 47 && nChr < 58 ? nChr + 4\n    : nChr === 43 ? 62\n    : nChr === 47 ? 63\n    : 0\n}\n\n// Decode Base64 to Uint8Array\n// ---------------------------\nfunction decode (sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, '')\n  var nInLen = sB64Enc.length\n  var nOutLen = nBlocksSize\n    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize\n    : nInLen * 3 + 1 >> 2\n  var taBytes = new Uint8Array(nOutLen)\n\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255\n      }\n      nUint24 = 0\n    }\n  }\n  return taBytes\n}\n\nmodule.exports = { decode: decode }\n","/* global XMLHttpRequest */\n'use strict'\n\n/**\n * Given a url and a return type, returns a promise to the content of the url\n * Basically it wraps a XMLHttpRequest into a Promise\n *\n * @param {String} url\n * @param {String} type - can be 'text' or 'arraybuffer'\n * @return {Promise}\n */\nmodule.exports = function (url, type) {\n  return new Promise(function (done, reject) {\n    var req = new XMLHttpRequest()\n    if (type) req.responseType = type\n\n    req.open('GET', url)\n    req.onload = function () {\n      req.status === 200 ? done(req.response) : reject(Error(req.statusText))\n    }\n    req.onerror = function () { reject(Error('Network Error')) }\n    req.send()\n  })\n}\n","'use strict'\n\nvar player = require('./player')\nvar events = require('./events')\nvar notes = require('./notes')\nvar scheduler = require('./scheduler')\nvar midi = require('./midi')\n\nfunction SamplePlayer (ac, source, options) {\n  return midi(scheduler(notes(events(player(ac, source, options)))))\n}\n\nif (typeof module === 'object' && module.exports) module.exports = SamplePlayer\nif (typeof window !== 'undefined') window.SamplePlayer = SamplePlayer\n","/* global AudioBuffer */\n'use strict'\n\nvar ADSR = require('adsr')\n\nvar EMPTY = {}\nvar DEFAULTS = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.9,\n  release: 0.3,\n  loop: false,\n  cents: 0,\n  loopStart: 0,\n  loopEnd: 0\n}\n\n/**\n * Create a sample player.\n *\n * @param {AudioContext} ac - the audio context\n * @param {ArrayBuffer|Object<String,ArrayBuffer>} source\n * @param {Onject} options - (Optional) an options object\n * @return {player} the player\n * @example\n * var SamplePlayer = require('sample-player')\n * var ac = new AudioContext()\n * var snare = SamplePlayer(ac, <AudioBuffer>)\n * snare.play()\n */\nfunction SamplePlayer (ac, source, options) {\n  var connected = false\n  var nextId = 0\n  var tracked = {}\n  var out = ac.createGain()\n  out.gain.value = 1\n\n  var opts = Object.assign({}, DEFAULTS, options)\n\n  /**\n   * @namespace\n   */\n  var player = { context: ac, out: out, opts: opts }\n  if (source instanceof AudioBuffer) player.buffer = source\n  else player.buffers = source\n\n  /**\n   * Start a sample buffer.\n   *\n   * The returned object has a function `stop(when)` to stop the sound.\n   *\n   * @param {String} name - the name of the buffer. If the source of the\n   * SamplePlayer is one sample buffer, this parameter is not required\n   * @param {Float} when - (Optional) when to start (current time if by default)\n   * @param {Object} options - additional sample playing options\n   * @return {AudioNode} an audio node with a `stop` function\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   * sample.start()\n   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer\n   * @example\n   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)\n   * drums.start('snare')\n   * drums.start('snare', 0, { gain: 0.3 })\n   */\n  player.start = function (name, when, options) {\n    // if only one buffer, reorder arguments\n    if (player.buffer && name !== null) return player.start(null, name, when)\n\n    var buffer = name ? player.buffers[name] : player.buffer\n    if (!buffer) {\n      console.warn('Buffer ' + name + ' not found.')\n      return\n    } else if (!connected) {\n      console.warn('SamplePlayer not connected to any node.')\n      return\n    }\n\n    var opts = options || EMPTY\n    when = Math.max(ac.currentTime, when || 0)\n    player.emit('start', when, name, opts)\n    var node = createNode(name, buffer, opts)\n    node.id = track(name, node)\n    node.env.start(when)\n    node.source.start(when)\n    player.emit('started', when, node.id, node)\n    if (opts.duration) node.stop(when + opts.duration)\n    return node\n  }\n\n  // NOTE: start will be override so we can't copy the function reference\n  // this is obviously not a good design, so this code will be gone soon.\n  /**\n   * An alias for `player.start`\n   * @see player.start\n   * @since 0.3.0\n   */\n  player.play = function (name, when, options) {\n    return player.start(name, when, options)\n  }\n\n  /**\n   * Stop some or all samples\n   *\n   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime\n   * if not specified)\n   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop\n   * @return {Array} an array of ids of the stoped samples\n   *\n   * @example\n   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)\n   * longSound.start(ac.currentTime)\n   * longSound.start(ac.currentTime + 1)\n   * longSound.start(ac.currentTime + 2)\n   * longSound.stop(ac.currentTime + 3) // stop the three sounds\n   */\n  player.stop = function (when, ids) {\n    var node\n    ids = ids || Object.keys(tracked)\n    return ids.map(function (id) {\n      node = tracked[id]\n      if (!node) return null\n      node.stop(when)\n      return node.id\n    })\n  }\n  /**\n   * Connect the player to a destination node\n   *\n   * @param {AudioNode} destination - the destination node\n   * @return {AudioPlayer} the player\n   * @chainable\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   */\n  player.connect = function (dest) {\n    connected = true\n    out.connect(dest)\n    return player\n  }\n\n  player.emit = function (event, when, obj, opts) {\n    if (player.onevent) player.onevent(event, when, obj, opts)\n    var fn = player['on' + event]\n    if (fn) fn(when, obj, opts)\n  }\n\n  return player\n\n  // =============== PRIVATE FUNCTIONS ============== //\n\n  function track (name, node) {\n    node.id = nextId++\n    tracked[node.id] = node\n    node.source.onended = function () {\n      var now = ac.currentTime\n      node.source.disconnect()\n      node.env.disconnect()\n      node.disconnect()\n      player.emit('ended', now, node.id, node)\n    }\n    return node.id\n  }\n\n  function createNode (name, buffer, options) {\n    var node = ac.createGain()\n    node.gain.value = 0 // the envelope will control the gain\n    node.connect(out)\n\n    node.env = envelope(ac, options, opts)\n    node.env.connect(node.gain)\n\n    node.source = ac.createBufferSource()\n    node.source.buffer = buffer\n    node.source.connect(node)\n    node.source.loop = options.loop || opts.loop\n    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)\n    node.source.loopStart = options.loopStart || opts.loopStart\n    node.source.loopEnd = options.loopEnd || opts.loopEnd\n    node.stop = function (when) {\n      var time = when || ac.currentTime\n      player.emit('stop', time, name)\n      var stopAt = node.env.stop(time)\n      node.source.stop(stopAt)\n    }\n    return node\n  }\n}\n\nfunction isNum (x) { return typeof x === 'number' }\nvar PARAMS = ['attack', 'decay', 'sustain', 'release']\nfunction envelope (ac, options, opts) {\n  var env = ADSR(ac)\n  var adsr = options.adsr || opts.adsr\n  PARAMS.forEach(function (name, i) {\n    if (adsr) env[name] = adsr[i]\n    else env[name] = options[name] || opts[name]\n  })\n  env.value.value = isNum(options.gain) ? options.gain\n    : isNum(opts.gain) ? opts.gain : 1\n  return env\n}\n\n/*\n * Get playback rate for a given pitch change (in cents)\n * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):\n * f2 = f1 * 2^( C / 1200 )\n */\nfunction centsToRate (cents) { return cents ? Math.pow(2, cents / 1200) : 1 }\n\nmodule.exports = SamplePlayer\n","module.exports = ADSR\n\nfunction ADSR(audioContext){\n  var node = audioContext.createGain()\n\n  var voltage = node._voltage = getVoltage(audioContext)\n  var value = scale(voltage)\n  var startValue = scale(voltage)\n  var endValue = scale(voltage)\n\n  node._startAmount = scale(startValue)\n  node._endAmount = scale(endValue)\n\n  node._multiplier = scale(value)\n  node._multiplier.connect(node)\n  node._startAmount.connect(node)\n  node._endAmount.connect(node)\n\n  node.value = value.gain\n  node.startValue = startValue.gain\n  node.endValue = endValue.gain\n\n  node.startValue.value = 0\n  node.endValue.value = 0\n\n  Object.defineProperties(node, props)\n  return node\n}\n\nvar props = {\n\n  attack: { value: 0, writable: true },\n  decay: { value: 0, writable: true },\n  sustain: { value: 1, writable: true },\n  release: {value: 0, writable: true },\n\n  getReleaseDuration: {\n    value: function(){\n      return this.release\n    }\n  },\n\n  start: {\n    value: function(at){\n      var target = this._multiplier.gain\n      var startAmount = this._startAmount.gain\n      var endAmount = this._endAmount.gain\n\n      this._voltage.start(at)\n      this._decayFrom = this._decayFrom = at+this.attack\n      this._startedAt = at\n\n      var sustain = this.sustain\n\n      target.cancelScheduledValues(at)\n      startAmount.cancelScheduledValues(at)\n      endAmount.cancelScheduledValues(at)\n\n      endAmount.setValueAtTime(0, at)\n\n      if (this.attack){\n        target.setValueAtTime(0, at)\n        target.linearRampToValueAtTime(1, at + this.attack)\n\n        startAmount.setValueAtTime(1, at)\n        startAmount.linearRampToValueAtTime(0, at + this.attack)\n      } else {\n        target.setValueAtTime(1, at)\n        startAmount.setValueAtTime(0, at)\n      }\n\n      if (this.decay){\n        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay))\n      }\n    }\n  },\n\n  stop: {\n    value: function(at, isTarget){\n      if (isTarget){\n        at = at - this.release\n      }\n\n      var endTime = at + this.release\n      if (this.release){\n\n        var target = this._multiplier.gain\n        var startAmount = this._startAmount.gain\n        var endAmount = this._endAmount.gain\n\n        target.cancelScheduledValues(at)\n        startAmount.cancelScheduledValues(at)\n        endAmount.cancelScheduledValues(at)\n\n        var expFalloff = getTimeConstant(this.release)\n\n        // truncate attack (required as linearRamp is removed by cancelScheduledValues)\n        if (this.attack && at < this._decayFrom){\n          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at)\n          target.linearRampToValueAtTime(valueAtTime, at)\n          startAmount.linearRampToValueAtTime(1-valueAtTime, at)\n          startAmount.setTargetAtTime(0, at, expFalloff)\n        }\n\n        endAmount.setTargetAtTime(1, at, expFalloff)\n        target.setTargetAtTime(0, at, expFalloff)\n      }\n\n      this._voltage.stop(endTime)\n      return endTime\n    }\n  },\n\n  onended: {\n    get: function(){\n      return this._voltage.onended\n    },\n    set: function(value){\n      this._voltage.onended = value\n    }\n  }\n\n}\n\nvar flat = new Float32Array([1,1])\nfunction getVoltage(context){\n  var voltage = context.createBufferSource()\n  var buffer = context.createBuffer(1, 2, context.sampleRate)\n  buffer.getChannelData(0).set(flat)\n  voltage.buffer = buffer\n  voltage.loop = true\n  return voltage\n}\n\nfunction scale(node){\n  var gain = node.context.createGain()\n  node.connect(gain)\n  return gain\n}\n\nfunction getTimeConstant(time){\n  return Math.log(time+1)/Math.log(100)\n}\n\nfunction getValue(start, end, fromTime, toTime, at){\n  var difference = end - start\n  var time = toTime - fromTime\n  var truncateTime = at - fromTime\n  var phase = truncateTime / time\n  var value = start + phase * difference\n\n  if (value <= start) {\n      value = start\n  }\n  if (value >= end) {\n      value = end\n  }\n\n  return value\n}\n","\nmodule.exports = function (player) {\n  /**\n   * Adds a listener of an event\n   * @chainable\n   * @param {String} event - the event name\n   * @param {Function} callback - the event handler\n   * @return {SamplePlayer} the player\n   * @example\n   * player.on('start', function(time, note) {\n   *   console.log(time, note)\n   * })\n   */\n  player.on = function (event, cb) {\n    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event)\n    var prop = 'on' + event\n    var old = player[prop]\n    player[prop] = old ? chain(old, cb) : cb\n    return player\n  }\n  return player\n}\n\nfunction chain (fn1, fn2) {\n  return function (a, b, c, d) { fn1(a, b, c, d); fn2(a, b, c, d) }\n}\n","'use strict'\n\nvar note = require('note-parser')\nvar isMidi = function (n) { return n !== null && n !== [] && n >= 0 && n < 129 }\nvar toMidi = function (n) { return isMidi(n) ? +n : note.midi(n) }\n\n// Adds note name to midi conversion\nmodule.exports = function (player) {\n  if (player.buffers) {\n    var map = player.opts.map\n    var toKey = typeof map === 'function' ? map : toMidi\n    var mapper = function (name) {\n      return name ? toKey(name) || name : null\n    }\n\n    player.buffers = mapBuffers(player.buffers, mapper)\n    var start = player.start\n    player.start = function (name, when, options) {\n      var key = mapper(name)\n      var dec = key % 1\n      if (dec) {\n        key = Math.floor(key)\n        options = Object.assign(options || {}, { cents: Math.floor(dec * 100) })\n      }\n      return start(key, when, options)\n    }\n  }\n  return player\n}\n\nfunction mapBuffers (buffers, toKey) {\n  return Object.keys(buffers).reduce(function (mapped, name) {\n    mapped[toKey(name)] = buffers[name]\n    return mapped\n  }, {})\n}\n","'use strict'\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nfunction regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true if the note is the tonic of something.\n * If true, en extra tonicOf property is returned. It's false by default.\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n * Can detect pitch class enhramonics.\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nfunction parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || !isTonic && m[4]) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  p.chroma = SEMITONES[p.step] + p.alt\n  if (m[3]) {\n    p.oct = +m[3]\n    p.midi = p.chroma + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\n/**\n * Given a midi number, return its frequency\n * @param {Integer} midi - midi note number\n * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)\n * @return {Float} frequency in hertzs\n */\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar parser = { parse: parse, regex: regex, midiToFreq: midiToFreq }\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq']\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src)\n    return p && (typeof p[name] !== 'undefined') ? p[name] : null\n  }\n})\n\nmodule.exports = parser\n\n// extra API docs\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String} note - the note name\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n */\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n */\n","'use strict'\n\nvar isArr = Array.isArray\nvar isObj = function (o) { return o && typeof o === 'object' }\nvar OPTS = {}\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime\n    var when = time < now ? now : time\n    player.emit('schedule', when, events)\n    var t, o, note, opts\n    return events.map(function (event) {\n      if (!event) return null\n      else if (isArr(event)) {\n        t = event[0]; o = event[1]\n      } else {\n        t = event.time; o = event\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null\n        opts = o\n      } else {\n        note = o\n        opts = OPTS\n      }\n\n      return player.start(note, when + (t || 0), opts)\n    })\n  }\n  return player\n}\n","var midimessage = require('midimessage')\n\nmodule.exports = function (player) {\n  /**\n  * Connect a player to a midi input\n  *\n  * The options accepts:\n  *\n  * - channel: the channel to listen to. Listen to all channels by default.\n  *\n  * @param {MIDIInput} input\n  * @param {Object} options - (Optional)\n  * @return {SamplePlayer} the player\n  * @example\n  * var piano = player(...)\n  * window.navigator.requestMIDIAccess().then(function (midiAccess) {\n  *   midiAccess.inputs.forEach(function (midiInput) {\n  *     piano.listenToMidi(midiInput)\n  *   })\n  * })\n  */\n  player.listenToMidi = function (input, options) {\n    var started = {}\n    var opts = options || {}\n    var gain = opts.gain || function (vel) { return vel / 127 }\n\n    input.onmidimessage = function (msg) {\n      var mm = msg.messageType ? msg : midimessage(msg)\n      if (mm.messageType === 'noteon' && mm.velocity === 0) {\n        mm.messageType = 'noteoff'\n      }\n      if (opts.channel && mm.channel !== opts.channel) return\n\n      switch (mm.messageType) {\n        case 'noteon':\n          started[mm.key] = player.play(mm.key, 0, { gain: gain(mm.velocity) })\n          break\n        case 'noteoff':\n          if (started[mm.key]) {\n            started[mm.key].stop()\n            delete started[mm.key]\n          }\n          break\n      }\n    }\n    return player\n  }\n  return player\n}\n","(function(e){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=e()}else if(typeof define===\"function\"&&define.amd){define([],e)}else{var t;if(typeof window!==\"undefined\"){t=window}else if(typeof global!==\"undefined\"){t=global}else if(typeof self!==\"undefined\"){t=self}else{t=this}t.midimessage=e()}})(function(){var e,t,s;return function o(e,t,s){function a(n,i){if(!t[n]){if(!e[n]){var l=typeof require==\"function\"&&require;if(!i&&l)return l(n,!0);if(r)return r(n,!0);var h=new Error(\"Cannot find module '\"+n+\"'\");throw h.code=\"MODULE_NOT_FOUND\",h}var c=t[n]={exports:{}};e[n][0].call(c.exports,function(t){var s=e[n][1][t];return a(s?s:t)},c,c.exports,o,e,t,s)}return t[n].exports}var r=typeof require==\"function\"&&require;for(var n=0;n<s.length;n++)a(s[n]);return a}({1:[function(e,t,s){\"use strict\";Object.defineProperty(s,\"__esModule\",{value:true});s[\"default\"]=function(e){function t(e){this._event=e;this._data=e.data;this.receivedTime=e.receivedTime;if(this._data&&this._data.length<2){console.warn(\"Illegal MIDI message of length\",this._data.length);return}this._messageCode=e.data[0]&240;this.channel=e.data[0]&15;switch(this._messageCode){case 128:this.messageType=\"noteoff\";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 144:this.messageType=\"noteon\";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 160:this.messageType=\"keypressure\";this.key=e.data[1]&127;this.pressure=e.data[2]&127;break;case 176:this.messageType=\"controlchange\";this.controllerNumber=e.data[1]&127;this.controllerValue=e.data[2]&127;if(this.controllerNumber===120&&this.controllerValue===0){this.channelModeMessage=\"allsoundoff\"}else if(this.controllerNumber===121){this.channelModeMessage=\"resetallcontrollers\"}else if(this.controllerNumber===122){if(this.controllerValue===0){this.channelModeMessage=\"localcontroloff\"}else{this.channelModeMessage=\"localcontrolon\"}}else if(this.controllerNumber===123&&this.controllerValue===0){this.channelModeMessage=\"allnotesoff\"}else if(this.controllerNumber===124&&this.controllerValue===0){this.channelModeMessage=\"omnimodeoff\"}else if(this.controllerNumber===125&&this.controllerValue===0){this.channelModeMessage=\"omnimodeon\"}else if(this.controllerNumber===126){this.channelModeMessage=\"monomodeon\"}else if(this.controllerNumber===127){this.channelModeMessage=\"polymodeon\"}break;case 192:this.messageType=\"programchange\";this.program=e.data[1];break;case 208:this.messageType=\"channelpressure\";this.pressure=e.data[1]&127;break;case 224:this.messageType=\"pitchbendchange\";var t=e.data[2]&127;var s=e.data[1]&127;this.pitchBend=(t<<8)+s;break}}return new t(e)};t.exports=s[\"default\"]},{}]},{},[1])(1)});\n//# sourceMappingURL=dist/index.js.map","'use strict'\n\nvar parser = require('note-parser')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected')\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API')\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')\n  Promise.all(this.promises).then(callback)\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.')\n  console.log('Please use Soundfont.instrument() instead.')\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = {name: name, play: oscillatorPlayer(ctx, options)}\n  this.instruments[name] = inst\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play\n      return inst\n    })\n    this.promises.push(promise)\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      promise.then(cb)\n    }\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      cb()\n    }\n  }\n  return inst\n}\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers (ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.')\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers\n  })\n}\nSoundfont.loadBuffers = loadBuffers\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer (ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {}\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.')\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\n    if (!freq) return\n\n    duration = duration || 0.2\n\n    options = options || {}\n    var destination = options.destination || defaultOptions.destination || ctx.destination\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\n    var gain = options.gain || defaultOptions.gain || 0.4\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = freq\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi\n\nmodule.exports = Soundfont\n","'use strict'\n\n// util\nfunction fillStr (s, num) { return Array(num + 1).join(s) }\nfunction isNum (x) { return typeof x === 'number' }\nfunction isStr (x) { return typeof x === 'string' }\nfunction isDef (x) { return typeof x !== 'undefined' }\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nexport function regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true the strings it's supposed to contain a note number\n * and some category (for example an scale: 'C# major'). It's false by default,\n * but when true, en extra tonicOf property is returned with the category ('major')\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics\n * since, for example, chroma of 'Cb' and 'B' are both 11\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nexport function parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || (!isTonic && m[4])) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  var pos = SEMITONES[p.step] + p.alt\n  p.chroma = pos < 0 ? 12 + pos : pos % 12\n  if (m[3]) { // has octave\n    p.oct = +m[3]\n    p.midi = pos + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\nvar LETTERS = 'CDEFGAB'\nfunction accStr (n) { return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n) }\nfunction octStr (n) { return !isNum(n) ? '' : '' + n }\n\n/**\n * Create a string from a parsed object or `step, alteration, octave` parameters\n * @param {Object} obj - the parsed data object\n * @return {String} a note string or null if not valid parameters\n * @since 1.2\n * @example\n * parser.build(parser.parse('cb2')) // => 'Cb2'\n *\n * @example\n * // it accepts (step, alteration, octave) parameters:\n * parser.build(3) // => 'F'\n * parser.build(3, -1) // => 'Fb'\n * parser.build(3, -1, 4) // => 'Fb4'\n */\nexport function build (s, a, o) {\n  if (s === null || typeof s === 'undefined') return null\n  if (s.step) return build(s.step, s.alt, s.oct)\n  if (s < 0 || s > 6) return null\n  return LETTERS.charAt(s) + accStr(a) + octStr(o)\n}\n\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String|Integer} note - the note name or midi number\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n * @example\n * // midi numbers are bypassed (even as strings)\n * parser.midi(60) // => 60\n * parser.midi('60') // => 60\n */\nexport function midi (note) {\n  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note\n  var p = parse(note)\n  return p && isDef(p.midi) ? p.midi : null\n}\n\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name or note midi number\n * @param {String} tuning - (Optional) the A4 frequency (440 by default)\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n * @example\n * // can change tuning (440 by default)\n * parser.freq('A4', 444) // => 444\n * parser.freq('A3', 444) // => 222\n * @example\n * // it accepts midi numbers (as numbers and as strings)\n * parser.freq(69) // => 440\n * parser.freq('69', 442) // => 442\n */\nexport function freq (note, tuning) {\n  var m = midi(note)\n  return m === null ? null : midiToFreq(m, tuning)\n}\n\nexport function letter (src) { return (parse(src) || {}).letter }\nexport function acc (src) { return (parse(src) || {}).acc }\nexport function pc (src) { return (parse(src) || {}).pc }\nexport function step (src) { return (parse(src) || {}).step }\nexport function alt (src) { return (parse(src) || {}).alt }\nexport function chroma (src) { return (parse(src) || {}).chroma }\nexport function oct (src) { return (parse(src) || {}).oct }\n","export const mainElm = document.querySelector(\"main\") as HTMLElement;\n\nexport function htmlToElement(html: string): HTMLElement {\n    const template = document.createElement(\"template\");\n    template.innerHTML = html.trim();\n    return template.content.firstChild as HTMLElement;\n}\n","import { InstrumentName } from \"soundfont-player\";\n\nexport const instrumentNames: InstrumentName[] = [\n    \"accordion\",\n    \"acoustic_bass\",\n    \"acoustic_grand_piano\",\n    \"acoustic_guitar_nylon\",\n    \"acoustic_guitar_steel\",\n    \"agogo\",\n    \"alto_sax\",\n    \"applause\",\n    \"bagpipe\",\n    \"banjo\",\n    \"baritone_sax\",\n    \"bassoon\",\n    \"bird_tweet\",\n    \"blown_bottle\",\n    \"brass_section\",\n    \"breath_noise\",\n    \"bright_acoustic_piano\",\n    \"celesta\",\n    \"cello\",\n    \"choir_aahs\",\n    \"church_organ\",\n    \"clarinet\",\n    \"clavinet\",\n    \"contrabass\",\n    \"distortion_guitar\",\n    \"drawbar_organ\",\n    \"dulcimer\",\n    \"electric_bass_finger\",\n    \"electric_bass_pick\",\n    \"electric_grand_piano\",\n    \"electric_guitar_clean\",\n    \"electric_guitar_jazz\",\n    \"electric_guitar_muted\",\n    \"electric_piano_1\",\n    \"electric_piano_2\",\n    \"english_horn\",\n    \"fiddle\",\n    \"flute\",\n    \"french_horn\",\n    \"fretless_bass\",\n    \"fx_1_rain\",\n    \"fx_2_soundtrack\",\n    \"fx_3_crystal\",\n    \"fx_4_atmosphere\",\n    \"fx_5_brightness\",\n    \"fx_6_goblins\",\n    \"fx_7_echoes\",\n    \"fx_8_scifi\",\n    \"glockenspiel\",\n    \"guitar_fret_noise\",\n    \"guitar_harmonics\",\n    \"gunshot\",\n    \"harmonica\",\n    \"harpsichord\",\n    \"helicopter\",\n    \"honkytonk_piano\",\n    \"kalimba\",\n    \"koto\",\n    \"lead_1_square\",\n    \"lead_2_sawtooth\",\n    \"lead_3_calliope\",\n    \"lead_4_chiff\",\n    \"lead_5_charang\",\n    \"lead_6_voice\",\n    \"lead_7_fifths\",\n    \"lead_8_bass__lead\",\n    \"marimba\",\n    \"melodic_tom\",\n    \"music_box\",\n    \"muted_trumpet\",\n    \"oboe\",\n    \"ocarina\",\n    \"orchestra_hit\",\n    \"orchestral_harp\",\n    \"overdriven_guitar\",\n    \"pad_1_new_age\",\n    \"pad_2_warm\",\n    \"pad_3_polysynth\",\n    \"pad_4_choir\",\n    \"pad_5_bowed\",\n    \"pad_6_metallic\",\n    \"pad_7_halo\",\n    \"pad_8_sweep\",\n    \"pan_flute\",\n    \"percussive_organ\",\n    \"piccolo\",\n    \"pizzicato_strings\",\n    \"recorder\",\n    \"reed_organ\",\n    \"reverse_cymbal\",\n    \"rock_organ\",\n    \"seashore\",\n    \"shakuhachi\",\n    \"shamisen\",\n    \"shanai\",\n    \"sitar\",\n    \"slap_bass_1\",\n    \"slap_bass_2\",\n    \"soprano_sax\",\n    \"steel_drums\",\n    \"string_ensemble_1\",\n    \"string_ensemble_2\",\n    \"synth_bass_1\",\n    \"synth_bass_2\",\n    \"synth_brass_1\",\n    \"synth_brass_2\",\n    \"synth_choir\",\n    \"synth_drum\",\n    \"synth_strings_1\",\n    \"synth_strings_2\",\n    \"taiko_drum\",\n    \"tango_accordion\",\n    \"telephone_ring\",\n    \"tenor_sax\",\n    \"timpani\",\n    \"tinkle_bell\",\n    \"tremolo_strings\",\n    \"trombone\",\n    \"trumpet\",\n    \"tuba\",\n    \"tubular_bells\",\n    \"vibraphone\",\n    \"viola\",\n    \"violin\",\n    \"voice_oohs\",\n    \"whistle\",\n    \"woodblock\",\n    \"xylophone\",\n];\n","import { Midi } from \"@tonejs/midi\";\nimport { midiToNote } from \"./notes\";\n\nexport class MidiPlayer {\n    midiToPlay: Midi | null = null;\n    pressNoteFunc: (note: string, duration: number, velocity?: number) => void;\n\n    midiPaused = true;\n    trackIndexUpToArray: number[] = [];\n    timeStarted: number | null = null;\n    timestampPaused = 0;\n    amountOftimePaused = 0;\n\n    constructor(pressNoteFunc: MidiPlayer[\"pressNoteFunc\"]) {\n        this.pressNoteFunc = pressNoteFunc;\n    }\n\n    setMidiFile(file?: File) {\n        if (!file) {\n            this.midiToPlay = null;\n            return;\n        }\n\n        const reader = new FileReader();\n        reader.onload = () => (this.midiToPlay = new Midi(reader.result as ArrayBuffer));\n        reader.readAsArrayBuffer(file);\n    }\n\n    update(): void {\n        if (this.midiPaused || !this.midiToPlay) return;\n\n        this.midiToPlay.tracks.forEach((track, i) => {\n            const indexUpTo = this.trackIndexUpToArray[i];\n\n            if (indexUpTo >= track.notes.length) return;\n            const note = track.notes[indexUpTo];\n\n            // figure out if time now is next key\n            const now = performance.now() - (this.timeStarted ?? 0) - this.amountOftimePaused;\n            const delta = now - note.time * 1000;\n            if (delta > 0) {\n                const noteName = midiToNote(note.midi);\n                // don't play the note if we're too behind\n                if (delta < 100) this.pressNoteFunc(noteName, note.duration * 1000, note.velocity);\n                this.trackIndexUpToArray[i]++;\n            }\n        });\n\n        requestAnimationFrame(this.update.bind(this));\n    }\n\n    pause() {\n        this.timestampPaused = performance.now();\n        this.midiPaused = true;\n    }\n\n    resume() {\n        if (!this.midiToPlay) return alert(\"No midi file selected!\");\n\n        if (this.timeStarted == null) {\n            this.reset();\n        } else {\n            this.amountOftimePaused += performance.now() - this.timestampPaused;\n        }\n\n        this.midiPaused = false;\n        this.update();\n    }\n\n    reset() {\n        if (!this.midiToPlay) return;\n        this.trackIndexUpToArray = new Array(this.midiToPlay.tracks.length).fill(0);\n        this.timeStarted = performance.now();\n        this.amountOftimePaused = 0;\n    }\n}\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { MidiData } from \"midi-file\";\nimport { search } from \"./BinarySearch\";\n\nconst privatePPQMap = new WeakMap<Header, number>();\n\nexport interface TempoEvent {\n\tticks: number;\n\tbpm: number;\n\ttime?: number;\n}\n\nexport interface TimeSignatureEvent {\n\tticks: number;\n\ttimeSignature: number[];\n\tmeasures?: number;\n}\n\nexport interface MetaEvent {\n\ttext: string;\n\ttype: string;\n\tticks: number;\n}\n\nexport interface KeySignatureEvent {\n\tticks: number;\n\tkey: string;\n\tscale: string;\n}\n\n/**\n * @hidden\n */\nexport const keySignatureKeys = [\n\t\"Cb\",\n\t\"Gb\",\n\t\"Db\",\n\t\"Ab\",\n\t\"Eb\",\n\t\"Bb\",\n\t\"F\",\n\t\"C\",\n\t\"G\",\n\t\"D\",\n\t\"A\",\n\t\"E\",\n\t\"B\",\n\t\"F#\",\n\t\"C#\",\n];\n\n/** The parsed midi file header */\nexport class Header {\n\t/**\n\t * The array of all the tempo events\n\t */\n\ttempos: TempoEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\ttimeSignatures: TimeSignatureEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\tkeySignatures: KeySignatureEvent[] = [];\n\n\t/**\n\t * Additional meta events\n\t */\n\tmeta: MetaEvent[] = [];\n\n\t/**\n\t * The name of the midi file\n\t */\n\tname = \"\";\n\n\tconstructor(midiData?: MidiData) {\n\t\t// look through all the tracks for tempo changes\n\n\t\tprivatePPQMap.set(this, 480);\n\n\t\tif (midiData) {\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\n\t\t\t// check time signature and tempo events from all of the tracks\n\t\t\tmidiData.tracks.forEach((track) =>\n\t\t\t\ttrack.forEach((event) => {\n\t\t\t\t\tif (event.meta) {\n\t\t\t\t\t\tif (event.type === \"timeSignature\") {\n\t\t\t\t\t\t\tthis.timeSignatures.push({\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t\ttimeSignature: [\n\t\t\t\t\t\t\t\t\tevent.numerator,\n\t\t\t\t\t\t\t\t\tevent.denominator,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"setTempo\") {\n\t\t\t\t\t\t\tthis.tempos.push({\n\t\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"keySignature\") {\n\t\t\t\t\t\t\tthis.keySignatures.push({\n\t\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\n\t\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\t// check the first track for other relevant data\n\t\t\tmidiData.tracks[0].forEach((event) => {\n\t\t\t\tif (event.meta) {\n\t\t\t\t\tif (event.type === \"trackName\") {\n\t\t\t\t\t\tthis.name = event.text;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.type === \"text\" ||\n\t\t\t\t\t\tevent.type === \"cuePoint\" ||\n\t\t\t\t\t\tevent.type === \"marker\" ||\n\t\t\t\t\t\tevent.type === \"lyrics\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.meta.push({\n\t\t\t\t\t\t\ttext: event.text,\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\t/**\n\t * This must be invoked after any changes are made to the tempo array\n\t * or the timeSignature array for the updated values to be reflected.\n\t */\n\tupdate(): void {\n\t\tlet currentTime = 0;\n\t\tlet lastEventBeats = 0;\n\t\t// make sure it's sorted\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.tempos.forEach((event, index) => {\n\t\t\tconst lastBPM =\n\t\t\t\tindex > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\n\t\t\tconst beats = event.ticks / this.ppq - lastEventBeats;\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\n\t\t\tevent.time = elapsedSeconds + currentTime;\n\t\t\tcurrentTime = event.time;\n\t\t\tlastEventBeats += beats;\n\t\t});\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.timeSignatures.forEach((event, index) => {\n\t\t\tconst lastEvent =\n\t\t\t\tindex > 0\n\t\t\t\t\t? this.timeSignatures[index - 1]\n\t\t\t\t\t: this.timeSignatures[0];\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\n\t\t\tconst elapsedMeasures =\n\t\t\t\telapsedBeats /\n\t\t\t\tlastEvent.timeSignature[0] /\n\t\t\t\t(lastEvent.timeSignature[1] / 4);\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\n\t\t});\n\t}\n\n\t/**\n\t * Convert ticks into seconds based on the tempo changes\n\t */\n\tticksToSeconds(ticks: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = ticks / this.ppq;\n\t\t\treturn (60 / 120) * beats;\n\t\t}\n\t}\n\n\t/**\n\t * Convert ticks into measures based off of the time signatures\n\t */\n\tticksToMeasures(ticks: number): number {\n\t\tconst index = search(this.timeSignatures, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\n\t\t\treturn (\n\t\t\t\ttimeSigEvent.measures +\n\t\t\t\telapsedBeats /\n\t\t\t\t\t(timeSigEvent.timeSignature[0] /\n\t\t\t\t\t\ttimeSigEvent.timeSignature[1]) /\n\t\t\t\t\t4\n\t\t\t);\n\t\t} else {\n\t\t\treturn ticks / this.ppq / 4;\n\t\t}\n\t}\n\n\t/**\n\t * The number of ticks per quarter note\n\t */\n\tget ppq(): number {\n\t\treturn privatePPQMap.get(this);\n\t}\n\n\t/**\n\t * Convert seconds to ticks based on the tempo events\n\t */\n\tsecondsToTicks(seconds: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, seconds, \"time\");\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedTime = seconds - tempoTime;\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = seconds / (60 / 120);\n\t\t\treturn Math.round(beats * this.ppq);\n\t\t}\n\t}\n\n\t/**\n\t * Convert the header into an object.\n\t */\n\ttoJSON(): HeaderJSON {\n\t\treturn {\n\t\t\tkeySignatures: this.keySignatures,\n\t\t\tmeta: this.meta,\n\t\t\tname: this.name,\n\t\t\tppq: this.ppq,\n\t\t\ttempos: this.tempos.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\tbpm: t.bpm,\n\t\t\t\t\tticks: t.ticks,\n\t\t\t\t};\n\t\t\t}),\n\t\t\ttimeSignatures: this.timeSignatures,\n\t\t};\n\t}\n\n\t/**\n\t * parse a header json object.\n\t */\n\tfromJSON(json: HeaderJSON): void {\n\t\tthis.name = json.name;\n\t\t// clone all the attributes\n\t\tthis.tempos = json.tempos.map((t) => Object.assign({}, t));\n\t\tthis.timeSignatures = json.timeSignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.keySignatures = json.keySignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.meta = json.meta.map((t) => Object.assign({}, t));\n\t\tprivatePPQMap.set(this, json.ppq);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\n\t * any other tempos currently set and update all of the event timing.\n\t * @param bpm The tempo in beats per second\n\t */\n\tsetTempo(bpm: number): void {\n\t\tthis.tempos = [\n\t\t\t{\n\t\t\t\tbpm,\n\t\t\t\tticks: 0,\n\t\t\t},\n\t\t];\n\t\tthis.update();\n\t}\n}\n\nexport interface HeaderJSON {\n\tname: string;\n\tppq: number;\n\tmeta: MetaEvent[];\n\ttempos: TempoEvent[];\n\ttimeSignatures: TimeSignatureEvent[];\n\tkeySignatures: KeySignatureEvent[];\n}\n","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","/**\n * Return the index of the element at or before the given property\n * @hidden\n */\nexport function search(array: any[], value: any, prop= \"ticks\"): number {\n\tlet beginning = 0;\n\tconst len = array.length;\n\tlet end = len;\n\tif (len > 0 && array[len - 1][prop] <= value) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tconst event = array[midPoint];\n\t\tconst nextEvent = array[midPoint + 1];\n\t\tif (event[prop] === value) {\n\t\t\t// choose the last one that has the same value\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\n\t\t\t\tconst testEvent = array[i];\n\t\t\t\tif (testEvent[prop] === value) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] > value) {\n\t\t\t// search lower\n\t\t\tend = midPoint;\n\t\t} else if (event[prop] < value) {\n\t\t\t// search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\n\tif (array.length) {\n\t\tconst index = search(array, event[prop], prop);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n","import {\n\tMidiControllerEvent,\n\tMidiEndOfTrackEvent,\n\tMidiNoteOffEvent,\n\tMidiNoteOnEvent,\n\tMidiPitchBendEvent,\n\tMidiTrackData,\n\tMidiTrackNameEvent,\n} from \"midi-file\";\nimport { insert } from \"./BinarySearch\";\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\n\nimport { Header } from \"./Header\";\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\n\nconst privateHeaderMap = new WeakMap<Track, Header>();\n\n/**\n * A Track is a collection of notes and controlChanges\n */\nexport class Track {\n\t/**\n\t * The name of the track\n\t */\n\tname = \"\";\n\n\t/**\n\t * The instrument associated with the track\n\t */\n\tinstrument: Instrument;\n\n\t/**\n\t * The track's note events\n\t */\n\tnotes: Note[] = [];\n\n\t/**\n\t * The channel number of the track. Applies this channel\n\t * to all events associated with the channel\n\t */\n\tchannel: number;\n\n\t/**\n\t * The control change events\n\t */\n\tcontrolChanges = createControlChanges();\n\n\t/**\n\t * The end of track event (if it exists) in ticks\n\t */\n\tendOfTrackTicks?: number;\n\n\t/**\n\t * The pitch bend events\n\t */\n\tpitchBends: PitchBend[] = [];\n\n\tconstructor(trackData: MidiTrackData, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tif (trackData) {\n\t\t\tconst nameEvent = trackData.find(\n\t\t\t\t(e) => e.type === \"trackName\"\n\t\t\t) as MidiTrackNameEvent;\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\n\t\t}\n\n\t\tthis.instrument = new Instrument(trackData, this);\n\n\t\t// defaults to 0\n\t\tthis.channel = 0;\n\n\t\tif (trackData) {\n\t\t\tconst noteOns = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOn\"\n\t\t\t) as MidiNoteOnEvent[];\n\t\t\tconst noteOffs = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOff\"\n\t\t\t) as MidiNoteOffEvent[];\n\t\t\twhile (noteOns.length) {\n\t\t\t\tconst currentNote = noteOns.shift();\n\t\t\t\t// set the channel based on the note\n\t\t\t\tthis.channel = currentNote.channel;\n\t\t\t\t// find the corresponding note off\n\t\t\t\tconst offIndex = noteOffs.findIndex(\n\t\t\t\t\t(note) =>\n\t\t\t\t\t\tnote.noteNumber === currentNote.noteNumber &&\n\t\t\t\t\t\tnote.absoluteTime >= currentNote.absoluteTime\n\t\t\t\t);\n\t\t\t\tif (offIndex !== -1) {\n\t\t\t\t\t// once it's got the note off, add it\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\n\t\t\t\t\tthis.addNote({\n\t\t\t\t\t\tdurationTicks:\n\t\t\t\t\t\t\tnoteOff.absoluteTime - currentNote.absoluteTime,\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst controlChanges = trackData.filter(\n\t\t\t\t(event) => event.type === \"controller\"\n\t\t\t) as MidiControllerEvent[];\n\t\t\tcontrolChanges.forEach((event) => {\n\t\t\t\tthis.addCC({\n\t\t\t\t\tnumber: event.controllerType,\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\tvalue: event.value / 127,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst pitchBends = trackData.filter(\n\t\t\t\t(event) => event.type === \"pitchBend\"\n\t\t\t) as MidiPitchBendEvent[];\n\t\t\tpitchBends.forEach((event) => {\n\t\t\t\tthis.addPitchBend({\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t// scale the value between -2^13 to 2^13 to -2 to 2\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst endOfTrackEvent:\n\t\t\t| MidiEndOfTrackEvent\n\t\t\t| undefined = trackData.find(\n\t\t\t\t(event): event is MidiEndOfTrackEvent =>\n\t\t\t\t\tevent.type === \"endOfTrack\"\n\t\t\t);\n\n\t\t\tthis.endOfTrackTicks =\n\t\t\t\tendOfTrackEvent !== undefined\n\t\t\t\t\t? endOfTrackEvent.absoluteTime\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Add a note to the notes array\n\t * @param props The note properties to add\n\t */\n\taddNote(props: NoteConstructorInterface): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst note = new Note(\n\t\t\t{\n\t\t\t\tmidi: 0,\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 0,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tObject.assign(note, props);\n\t\tinsert(this.notes, note, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t * @param props\n\t */\n\taddCC(\n\t\tprops:\n\t\t| Omit<ControlChangeInterface, \"ticks\">\n\t\t| Omit<ControlChangeInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst cc = new ControlChange(\n\t\t\t{\n\t\t\t\tcontrollerType: props.number,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tdelete props.number;\n\t\tObject.assign(cc, props);\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\n\t\t\tthis.controlChanges[cc.number] = [];\n\t\t}\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t */\n\taddPitchBend(\n\t\tprops:\n\t\t| Omit<PitchBendInterface, \"ticks\">\n\t\t| Omit<PitchBendInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst pb = new PitchBend({}, header);\n\t\tObject.assign(pb, props);\n\t\tinsert(this.pitchBends, pb, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * The end time of the last event in the track\n\t */\n\tget duration(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].time +\n\t\t\tthis.notes[this.notes.length - 1].duration;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].time + this.notes[i].duration;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * The end time of the last event in the track in ticks\n\t */\n\tget durationTicks(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].ticks +\n\t\t\tthis.notes[this.notes.length - 1].durationTicks;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * Assign the json values to this track\n\t */\n\tfromJSON(json: TrackJSON): void {\n\t\tthis.name = json.name;\n\t\tthis.channel = json.channel;\n\t\tthis.instrument = new Instrument(undefined, this);\n\t\tthis.instrument.fromJSON(json.instrument);\n\t\tif (json.endOfTrackTicks !== undefined) {\n\t\t\tthis.endOfTrackTicks = json.endOfTrackTicks;\n\t\t}\n\t\tfor (const number in json.controlChanges) {\n\t\t\tif (json.controlChanges[number]) {\n\t\t\t\tjson.controlChanges[number].forEach((cc) => {\n\t\t\t\t\tthis.addCC({\n\t\t\t\t\t\tnumber: cc.number,\n\t\t\t\t\t\tticks: cc.ticks,\n\t\t\t\t\t\tvalue: cc.value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tjson.notes.forEach((n) => {\n\t\t\tthis.addNote({\n\t\t\t\tdurationTicks: n.durationTicks,\n\t\t\t\tmidi: n.midi,\n\t\t\t\tticks: n.ticks,\n\t\t\t\tvelocity: n.velocity,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Convert the track into a JSON format\n\t */\n\ttoJSON(): TrackJSON {\n\t\t// convert all the CCs to JSON\n\t\tconst controlChanges = {};\n\t\tfor (let i = 0; i < 127; i++) {\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map((c) =>\n\t\t\t\t\tc.toJSON()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst json: TrackJSON = {\n\t\t\tchannel: this.channel,\n\t\t\tcontrolChanges,\n\t\t\tpitchBends: this.pitchBends.map((pb) => pb.toJSON()),\n\t\t\tinstrument: this.instrument.toJSON(),\n\t\t\tname: this.name,\n\t\t\tnotes: this.notes.map((n) => n.toJSON()),\n\t\t};\n\n\t\tif (this.endOfTrackTicks !== undefined) {\n\t\t\tjson.endOfTrackTicks = this.endOfTrackTicks;\n\t\t}\n\n\t\treturn json;\n\t}\n}\n\nexport interface TrackJSON {\n\tname: string;\n\tnotes: NoteJSON[];\n\tchannel: number;\n\tinstrument: InstrumentJSON;\n\tcontrolChanges: ControlChangesJSON;\n\tpitchBends: PitchBendJSON[];\n\tendOfTrackTicks?: number;\n}\n","import { Header } from \"./Header\";\nimport { MidiControllerEvent } from \"midi-file\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName = \"modulationWheel\" | \"breath\" | \"footController\" | \"portamentoTime\" | \"volume\" | \"balance\" | \"pan\" | \"sustain\" | \"portamentoTime\" | \"sostenuto\" | \"softPedal\" | \"legatoFootswitch\" | \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiChannelEvent, MidiTrackData, parseMidi } from \"midi-file\";\nimport { encode } from \"./Encode\";\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\n\n/**\n * The main midi parsing class\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated midi file\n\t * @param url The url to fetch\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`could not load ${url}`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\n\t\t// parse the midi data if there is any\n\t\tlet midiData = null;\n\t\tif (midiArray) {\n\t\t\tif (midiArray instanceof ArrayBuffer) {\n\t\t\t\tmidiArray = new Uint8Array(midiArray);\n\t\t\t}\n\t\t\tmidiData = parseMidi(midiArray);\n\n\t\t\t// add the absolute times to each of the tracks\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\t\t\t\ttrack.forEach(event => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// ensure at most one instrument per track\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// parse the midi data\n\t\tif (midiArray) {\n\t\t\t// format 0, everything is on the same track\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// if it's format 1 and there are no notes on the first track, remove it\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds\n\t */\n\tget duration(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks\n\t */\n\tget durationTicks(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the midi file\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the midi as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the midi object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object midi object\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: MidiTrackData[]): MidiTrackData[] {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as MidiChannelEvent).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","import { MidiPitchBendEvent, writeMidi } from \"midi-file\";\nimport { MidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiInstrumentEvent, MidiKeySignatureEvent, MidiNoteOffEvent,\n\tMidiNoteOnEvent, MidiTempoEvent, MidiTextEvent, MidiTimeSignatureEvent, MidiTrackNameEvent } from \"midi-file\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\nimport flatten from \"array-flatten\";\n\nfunction encodeNote(note: Note, channel: number): [MidiNoteOnEvent, MidiNoteOffEvent] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(cc: ControlChange, channel: number): MidiControllerEvent {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: Math.floor(cc.value * 127),\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(pb: PitchBend, channel: number): MidiPitchBendEvent {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): MidiInstrumentEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): MidiTrackNameEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): MidiTempoEvent {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): MidiTimeSignatureEvent {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): MidiKeySignatureEvent {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(textEvent: MetaEvent): MidiTextEvent {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as MidiTextEvent;\n}\n\n/**\n * Convert the midi object to an array\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// the name data\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// the remaining tracks\n\t\t\t...midi.tracks.map(track => {\n\t\t\t\treturn [\n\t\t\t\t\t// add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// sort and set deltaTime of all of the tracks\n\tmidiData.tracks = midiData.tracks.map(track => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\t\t// end of track\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as MidiEndOfTrackEvent);\n\t\treturn track;\n\t});\n\n\t// return midiData\n\treturn new Uint8Array(writeMidi(midiData));\n}\n","'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = flatten\nmodule.exports.from = flattenFrom\nmodule.exports.depth = flattenDepth\nmodule.exports.fromDepth = flattenFromDepth\n\n/**\n * Flatten an array.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flatten (array) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFrom(array)\n}\n\n/**\n * Flatten an array-like structure.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flattenFrom (array) {\n  return flattenDown(array, [])\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDepth (array, depth) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFromDepth(array, depth)\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenFromDepth (array, depth) {\n  if (typeof depth !== 'number') {\n    throw new TypeError('Expected the depth to be a number')\n  }\n\n  return flattenDownDepth(array, [], depth)\n}\n\n/**\n * Flatten an array indefinitely.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenDown (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDownDepth (array, result, depth) {\n  depth--\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > -1 && Array.isArray(value)) {\n      flattenDownDepth(value, result, depth)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n","import { controlChangeIds } from \"./ControlChange\";\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\n\nexport interface ControlChanges {\n\t[key: string]: ControlChange[];\n\t[key: number]: ControlChange[];\n}\n\nexport interface ControlChangesJSON {\n\t[key: string]: ControlChangeJSON[];\n\t[key: number]: ControlChangeJSON[];\n}\n\n/**\n * Automatically creates an alias for named control values using Proxies\n * @hidden\n */\nexport function createControlChanges(): ControlChanges {\n\treturn new Proxy({}, {\n\t\t// tslint:disable-next-line: typedef\n\t\tget(target, handler) {\n\t\t\tif (target[handler]) {\n\t\t\t\treturn target[handler];\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\treturn target[controlChangeIds[handler]];\n\t\t\t}\n\t\t},\n\t\t// tslint:disable-next-line: typedef\n\t\tset(target, handler, value) {\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\n\t\t\t} else {\n\t\t\t\ttarget[handler] = value;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t});\n}\n","import { Header } from \"./Header\";\nimport { MidiPitchBendEvent } from \"midi-file\";\n\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\n\n/**\n * Represents a pitch bend event\n */\nexport class PitchBend implements PitchBendInterface {\n\n\t/**\n\t * The pitch value from...\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiPitchBendEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): PitchBendJSON {\n\t\treturn {\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface PitchBendJSON {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface PitchBendInterface {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiInstrumentEvent, MidiTrackData } from \"midi-file\";\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the midi instrument of a track\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiTrackData, track: Track) {\n\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(e => e.type === \"programChange\") as MidiInstrumentEvent;\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tname: this.name,\n\t\t\tnumber: this.number,\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tnumber: number;\n\tname: string;\n\tfamily: string;\n}\n","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n];\n\nexport const InstrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"world\",\n\t\"percussive\",\n\t\"sound effects\",\n];\n\nexport const DrumKitByPatchID = {\n\t0: \"standard kit\",\n\t8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n};\n","import { MidiNoteEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * Convert a midi note into a pitch\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a noteOn and noteOff event\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes midi value\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1)\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\"\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\"\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n"],"names":["Piano","activeNoteMap","Map","mouseIsDown","midiPlayer","this","pressNote","bind","controlPanel","instrument","constructor","startNote","endNote","window","addEventListener","stopAllNotes","event","note","code","playNote","shiftKey","preventDefault","stopNote","createDOM","includeShift","velocity","has","octave","octaveShift","noteReal","key","document","querySelector","node","classList","add","play","undefined","gain","volume","set","audioNode","activeNote","get","remove","delete","sustain","stop","duration","setTimeout","querySelectorAll","forEach","clear","piano","appendChild","notes","whiteKeys","style","setProperty","toString","isWhite","length","onmousedown","onmouseup","onmouseenter","onmouseleave","noteNames","keyBinds","Backquote","Tab","KeyQ","Digit2","KeyW","Digit3","KeyE","KeyR","Digit5","KeyT","Digit6","KeyY","Digit7","KeyU","KeyI","Digit9","KeyO","Digit0","KeyP","BracketLeft","Equal","BracketRight","Backspace","Backslash","ShiftLeft","Enter","KeyA","KeyZ","KeyX","KeyD","KeyC","KeyF","KeyV","KeyB","KeyH","KeyN","KeyJ","KeyM","KeyK","Comma","Period","Semicolon","Slash","Quote","ShiftRight","getOctave","parseInt","charAt","getNoteName","substring","generateNotesFromRange","endOctave","startOctave","startNoteNameIndex","indexOf","endNoteNameIndex","noteNameIndex","reachedEndNote","noteName","push","midiToNote","midiNote","Math","floor","exports","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","value","exportAll","source","dest","keys","enumerable","export","destName","ControlPanel","_sustain","_volume","_octaveShift","_instrumentName","sustainInput","checked","volumeDisplay","textContent","octaveShiftSelect","name","instrumentStatus","audioContext","then","ins","AudioContext","panel","sustainControl","onchange","octaveShiftControl","createElement","i","octaveShiftOption","volumeControl","volumeInput","parseFloat","instrumentControl","instrumentSelect","instrumentName","option","selectedIndex","midiControl","midiFileInput","setMidiFile","files","playStopButton","onclick","playMidi","resetButton","stopMidi","reset","newOctaveShift","resume","pause","load","require","player","isSoundfontURL","test","nameToUrl","sf","format","Soundfont","ac","options","arguments","n","o","opts","isUrl","toUrl","url","soundfont","only","buffers","p","connect","destination","module","base64","fetch","fromRegex","r","prefix","pre","defVal","loader","ArrayBuffer","loadArrayBuffer","isAudioFileName","loadAudioFile","isPromise","loadPromise","isArray","loadArrayData","isObject","loadObjectData","isJsonFileName","loadJsonFile","isBase64Audio","loadBase64Audio","isJsFileName","loadMidiJSFile","Promise","resolve","reject","array","done","decodeAudioData","buffer","slice","from","promise","Array","all","map","data","obj","promises","audio","JSON","parse","decode","midiJsToJson","begin","Error","end","lastIndexOf","loadAudio","sBase64","nBlocksSize","nMod3","nMod4","nChr","sB64Enc","replace","nInLen","nOutLen","ceil","taBytes","Uint8Array","nUint24","nOutIdx","nInIdx","charCodeAt","type","req","XMLHttpRequest","responseType","open","onload","status","response","statusText","onerror","send","events","scheduler","midi","SamplePlayer","ADSR","EMPTY","DEFAULTS","attack","decay","release","loop","cents","loopStart","loopEnd","isNum","x","PARAMS","connected","nextId","tracked","out","createGain","assign","context","AudioBuffer","start","when","max","currentTime","emit","createNode","id","onended","now","disconnect","env","track","console","warn","ids","onevent","fn","adsr","envelope","createBufferSource","playbackRate","pow","time","stopAt","voltage","_voltage","createBuffer","sampleRate","getChannelData","flat","getVoltage","scale","startValue","endValue","_startAmount","_endAmount","_multiplier","defineProperties","props","writable","getReleaseDuration","at","target","startAmount","endAmount","_decayFrom","_startedAt","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","setTargetAtTime","getTimeConstant","isTarget","endTime","expFalloff","valueAtTime","fromTime","toTime","getValue","Float32Array","log","chain","fn1","fn2","b","c","d","on","cb","prop","old","toMidi","isMidi","toKey","mapper","reduce","mapped","mapBuffers","dec","REGEX","SEMITONES","str","isTonic","tuning","m","exec","letter","toUpperCase","acc","pc","step","alt","chroma","oct","freq","midiToFreq","tonicOf","parser","regex","src","isArr","OPTS","schedule","t","isObj","midimessage","listenToMidi","input","started","vel","onmidimessage","msg","mm","messageType","channel","e","define","amd","global","self","s","l","h","call","1","_event","_data","receivedTime","_messageCode","pressure","controllerNumber","controllerValue","channelModeMessage","program","pitchBend","ctx","instruments","oscillatorPlayer","defaultOptions","vcoType","vco","createOscillator","frequency","vca","prototype","onready","callback","inst","loadBuffers","noteToMidi","fillStr","num","join","pos","f","isStr","isDef","LETTERS","build","accStr","octStr","NoteParser","mainElm","htmlToElement","html","template","innerHTML","trim","content","firstChild","instrumentNames","MidiPlayer","midiToPlay","midiPaused","trackIndexUpToArray","timeStarted","timestampPaused","amountOftimePaused","pressNoteFunc","file","reader","FileReader","result","readAsArrayBuffer","update","tracks","indexUpTo","delta","performance","requestAnimationFrame","alert","fill","root","factory","installedModules","moduleId","modules","__webpack_require__","getter","Symbol","toStringTag","mode","ns","create","object","property","hasOwnProperty","privatePPQMap","WeakMap","keySignatureKeys","midiData","tempos","timeSignatures","keySignatures","meta","header","ticksPerBeat","ticks","absoluteTime","timeSignature","numerator","denominator","bpm","microsecondsPerBeat","text","lastEventBeats","sort","index","lastBPM","beats","ppq","elapsedSeconds","lastEvent","elapsedMeasures","measures","ticksToSeconds","search","tempo","tempoTime","elapsedBeats","ticksToMeasures","timeSigEvent","configurable","secondsToTicks","seconds","round","toJSON","fromJSON","json","setTempo","Header","parseMidi","writeMidi","beginning","len","midPoint","nextEvent","splice","privateHeaderMap","trackData","controlChanges","createControlChanges","pitchBends","nameEvent","find","Instrument","noteOns","filter","noteOffs","currentNote","shift","offIndex","findIndex","noteNumber","noteOff","addNote","durationTicks","noteOffVelocity","addCC","number","controllerType","addPitchBend","endOfTrackEvent","endOfTrackTicks","Note","insert","cc","ControlChange","pb","PitchBend","maxDuration","Track","controlChangeNames","2","4","5","7","8","10","64","65","66","67","68","84","controlChangeIds","privateCCNumberMap","__awaiter","next","throw","apply","__generator","label","sent","trys","ops","return","iterator","TypeError","pop","u","midiArray","currentTicks","deltaTime","newTracks","defaultTrack","trackMap","currentProgram","targetTrack","programNumber","trackKey","size","fromUrl","ok","arrayBuffer","Midi","durations","addTrack","toArray","encode","trackJSON","clone","lastEventTypeByte","Parser","eof","readEvent","readVarInt","eventTypeByte","readUInt8","readBytes","metatypeByte","readUInt16","readString","port","readUInt24","hourByte","frameRate","0","32","96","hour","min","sec","frame","subFrame","metronome","thirtyseconds","readInt8","param1","running","eventType","byte9","amount","bufferLen","readInt16","readInt24","readUInt32","bytes","String","fromCharCode","readChunk","headerChunk","numTracks","timeDivision","framesPerSecond","ticksPerFrame","trackChunk","parseTrack","w","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","24","25","29","30","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","codePointAt","reverse","writeTrack","__spreadArrays","__importDefault","keySig","keyIndex","textEvent","timeSig","encodeInstrument","encodeNotes","encodeControlChange","lastTime","flattenDown","depth","flattenDownDepth","flattenFrom","flattenFromDepth","fromDepth","Proxy","handler","privateTrackMap","programChange","percussion","DrumKitByPatchID","instrumentByPatchID","patchNumber","InstrumentFamilyByID","family","16","40","48","56","regexp","noteToScaleIndex","pitchToMidi","cbb","c#","cx","dbb","db","d#","dx","ebb","eb","e#","ex","fbb","fb","f#","fx","gbb","gb","g","g#","gx","abb","ab","a#","ax","bbb","bb","b#","bx","split","pitch","toLowerCase","noteOn","midiToPitchClass","diff","noteEndTicks"],"version":3,"file":"index.6c2b4b8b.js.map"}