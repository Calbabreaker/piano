{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Header.ts","webpack:///./node_modules/midi-file/index.js","webpack:///./src/BinarySearch.ts","webpack:///./src/Track.ts","webpack:///./src/ControlChange.ts","webpack:///./src/Midi.ts","webpack:///./node_modules/midi-file/lib/midi-parser.js","webpack:///./node_modules/midi-file/lib/midi-writer.js","webpack:///./src/Encode.ts","webpack:///./node_modules/array-flatten/array-flatten.js","webpack:///./src/ControlChanges.ts","webpack:///./src/PitchBend.ts","webpack:///./src/Instrument.ts","webpack:///./src/InstrumentMaps.ts","webpack:///./src/Note.ts"],"names":["root","factory","exports","module","define","amd","a","i","self","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","privatePPQMap","WeakMap","keySignatureKeys","midiData","tempos","timeSignatures","keySignatures","meta","set","header","ticksPerBeat","tracks","forEach","track","event","type","push","ticks","absoluteTime","timeSignature","numerator","denominator","bpm","microsecondsPerBeat","scale","text","update","currentTime","lastEventBeats","sort","b","index","lastBPM","beats","ppq","elapsedSeconds","time","lastEvent","elapsedMeasures","measures","ticksToSeconds","search","tempo","tempoTime","elapsedBeats","ticksToMeasures","timeSigEvent","secondsToTicks","seconds","Math","round","toJSON","map","fromJSON","json","assign","setTempo","Header","parseMidi","writeMidi","array","prop","beginning","len","length","end","midPoint","floor","nextEvent","splice","privateHeaderMap","trackData","notes","controlChanges","createControlChanges","pitchBends","nameEvent","find","e","instrument","Instrument","channel","noteOns","filter","noteOffs","currentNote","shift","offIndex","findIndex","note","noteNumber","noteOff","addNote","durationTicks","midi","noteOffVelocity","velocity","addCC","number","controllerType","addPitchBend","pow","endOfTrackEvent","endOfTrackTicks","undefined","props","Note","insert","cc","ControlChange","Array","isArray","pb","PitchBend","maxDuration","duration","Track","controlChangeNames","1","2","4","5","7","8","10","64","65","66","67","68","84","controlChangeIds","keys","reduce","obj","privateCCNumberMap","midiArray","ArrayBuffer","Uint8Array","currentTicks","deltaTime","newTracks","defaultTrack","trackMap","Map","currentProgram","fill","targetTrack","programNumber","trackKey","has","size","splitTracks","format","fromUrl","url","fetch","response","ok","arrayBuffer","Midi","Error","durations","max","addTrack","toArray","encode","trackJSON","clone","parseTrack","data","lastEventTypeByte","Parser","events","eof","readEvent","readVarInt","eventTypeByte","readUInt8","readBytes","metatypeByte","readUInt16","readString","port","readUInt24","hourByte","frameRate","0","hour","min","sec","frame","subFrame","metronome","thirtyseconds","readInt8","param1","running","eventType","byte9","amount","buffer","bufferLen","pos","result","u","readInt16","readInt24","readUInt32","bytes","slice","String","fromCharCode","apply","readChunk","id","headerChunk","numTracks","timeDivision","framesPerSecond","ticksPerFrame","parseHeader","trackChunk","writeTrack","w","opts","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","24","25","29","30","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","str","codePointAt","reverse","h","writeHeader","encodeNotes","encodeNote","encodeControlChange","encodeInstrument","keySig","keyIndex","indexOf","encodeKeySignature","textEvent","encodeTempo","timeSig","encodeTimeSignature","encodeControlChanges","encodePitchBend","encodePitchBends","lastTime","flattenFrom","flattenDown","flattenFromDepth","depth","TypeError","flattenDownDepth","from","fromDepth","Proxy","target","handler","privateTrackMap","programChange","percussion","DrumKitByPatchID","instrumentByPatchID","patchNumber","InstrumentFamilyByID","family","16","32","40","48","56","midiToPitchClass","regexp","noteToScaleIndex","pitchToMidi","cbb","cb","cx","dbb","db","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","split","exec","pitch","octave","toLowerCase","parseInt","noteOn","toString","diff","noteEndTicks"],"mappings":"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","file":"Midi.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { MidiData } from \"midi-file\";\nimport { search } from \"./BinarySearch\";\n\nconst privatePPQMap = new WeakMap<Header, number>();\n\nexport interface TempoEvent {\n\tticks: number;\n\tbpm: number;\n\ttime?: number;\n}\n\nexport interface TimeSignatureEvent {\n\tticks: number;\n\ttimeSignature: number[];\n\tmeasures?: number;\n}\n\nexport interface MetaEvent {\n\ttext: string;\n\ttype: string;\n\tticks: number;\n}\n\nexport interface KeySignatureEvent {\n\tticks: number;\n\tkey: string;\n\tscale: string;\n}\n\n/**\n * @hidden\n */\nexport const keySignatureKeys = [\n\t\"Cb\",\n\t\"Gb\",\n\t\"Db\",\n\t\"Ab\",\n\t\"Eb\",\n\t\"Bb\",\n\t\"F\",\n\t\"C\",\n\t\"G\",\n\t\"D\",\n\t\"A\",\n\t\"E\",\n\t\"B\",\n\t\"F#\",\n\t\"C#\",\n];\n\n/** The parsed midi file header */\nexport class Header {\n\t/**\n\t * The array of all the tempo events\n\t */\n\ttempos: TempoEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\ttimeSignatures: TimeSignatureEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\tkeySignatures: KeySignatureEvent[] = [];\n\n\t/**\n\t * Additional meta events\n\t */\n\tmeta: MetaEvent[] = [];\n\n\t/**\n\t * The name of the midi file\n\t */\n\tname = \"\";\n\n\tconstructor(midiData?: MidiData) {\n\t\t// look through all the tracks for tempo changes\n\n\t\tprivatePPQMap.set(this, 480);\n\n\t\tif (midiData) {\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\n\t\t\t// check time signature and tempo events from all of the tracks\n\t\t\tmidiData.tracks.forEach((track) =>\n\t\t\t\ttrack.forEach((event) => {\n\t\t\t\t\tif (event.meta) {\n\t\t\t\t\t\tif (event.type === \"timeSignature\") {\n\t\t\t\t\t\t\tthis.timeSignatures.push({\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t\ttimeSignature: [\n\t\t\t\t\t\t\t\t\tevent.numerator,\n\t\t\t\t\t\t\t\t\tevent.denominator,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"setTempo\") {\n\t\t\t\t\t\t\tthis.tempos.push({\n\t\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"keySignature\") {\n\t\t\t\t\t\t\tthis.keySignatures.push({\n\t\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\n\t\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\t// check the first track for other relevant data\n\t\t\tmidiData.tracks[0].forEach((event) => {\n\t\t\t\tif (event.meta) {\n\t\t\t\t\tif (event.type === \"trackName\") {\n\t\t\t\t\t\tthis.name = event.text;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.type === \"text\" ||\n\t\t\t\t\t\tevent.type === \"cuePoint\" ||\n\t\t\t\t\t\tevent.type === \"marker\" ||\n\t\t\t\t\t\tevent.type === \"lyrics\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.meta.push({\n\t\t\t\t\t\t\ttext: event.text,\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\t/**\n\t * This must be invoked after any changes are made to the tempo array\n\t * or the timeSignature array for the updated values to be reflected.\n\t */\n\tupdate(): void {\n\t\tlet currentTime = 0;\n\t\tlet lastEventBeats = 0;\n\t\t// make sure it's sorted\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.tempos.forEach((event, index) => {\n\t\t\tconst lastBPM =\n\t\t\t\tindex > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\n\t\t\tconst beats = event.ticks / this.ppq - lastEventBeats;\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\n\t\t\tevent.time = elapsedSeconds + currentTime;\n\t\t\tcurrentTime = event.time;\n\t\t\tlastEventBeats += beats;\n\t\t});\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.timeSignatures.forEach((event, index) => {\n\t\t\tconst lastEvent =\n\t\t\t\tindex > 0\n\t\t\t\t\t? this.timeSignatures[index - 1]\n\t\t\t\t\t: this.timeSignatures[0];\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\n\t\t\tconst elapsedMeasures =\n\t\t\t\telapsedBeats /\n\t\t\t\tlastEvent.timeSignature[0] /\n\t\t\t\t(lastEvent.timeSignature[1] / 4);\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\n\t\t});\n\t}\n\n\t/**\n\t * Convert ticks into seconds based on the tempo changes\n\t */\n\tticksToSeconds(ticks: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = ticks / this.ppq;\n\t\t\treturn (60 / 120) * beats;\n\t\t}\n\t}\n\n\t/**\n\t * Convert ticks into measures based off of the time signatures\n\t */\n\tticksToMeasures(ticks: number): number {\n\t\tconst index = search(this.timeSignatures, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\n\t\t\treturn (\n\t\t\t\ttimeSigEvent.measures +\n\t\t\t\telapsedBeats /\n\t\t\t\t\t(timeSigEvent.timeSignature[0] /\n\t\t\t\t\t\ttimeSigEvent.timeSignature[1]) /\n\t\t\t\t\t4\n\t\t\t);\n\t\t} else {\n\t\t\treturn ticks / this.ppq / 4;\n\t\t}\n\t}\n\n\t/**\n\t * The number of ticks per quarter note\n\t */\n\tget ppq(): number {\n\t\treturn privatePPQMap.get(this);\n\t}\n\n\t/**\n\t * Convert seconds to ticks based on the tempo events\n\t */\n\tsecondsToTicks(seconds: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, seconds, \"time\");\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedTime = seconds - tempoTime;\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = seconds / (60 / 120);\n\t\t\treturn Math.round(beats * this.ppq);\n\t\t}\n\t}\n\n\t/**\n\t * Convert the header into an object.\n\t */\n\ttoJSON(): HeaderJSON {\n\t\treturn {\n\t\t\tkeySignatures: this.keySignatures,\n\t\t\tmeta: this.meta,\n\t\t\tname: this.name,\n\t\t\tppq: this.ppq,\n\t\t\ttempos: this.tempos.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\tbpm: t.bpm,\n\t\t\t\t\tticks: t.ticks,\n\t\t\t\t};\n\t\t\t}),\n\t\t\ttimeSignatures: this.timeSignatures,\n\t\t};\n\t}\n\n\t/**\n\t * parse a header json object.\n\t */\n\tfromJSON(json: HeaderJSON): void {\n\t\tthis.name = json.name;\n\t\t// clone all the attributes\n\t\tthis.tempos = json.tempos.map((t) => Object.assign({}, t));\n\t\tthis.timeSignatures = json.timeSignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.keySignatures = json.keySignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.meta = json.meta.map((t) => Object.assign({}, t));\n\t\tprivatePPQMap.set(this, json.ppq);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\n\t * any other tempos currently set and update all of the event timing.\n\t * @param bpm The tempo in beats per second\n\t */\n\tsetTempo(bpm: number): void {\n\t\tthis.tempos = [\n\t\t\t{\n\t\t\t\tbpm,\n\t\t\t\tticks: 0,\n\t\t\t},\n\t\t];\n\t\tthis.update();\n\t}\n}\n\nexport interface HeaderJSON {\n\tname: string;\n\tppq: number;\n\tmeta: MetaEvent[];\n\ttempos: TempoEvent[];\n\ttimeSignatures: TimeSignatureEvent[];\n\tkeySignatures: KeySignatureEvent[];\n}\n","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","/**\n * Return the index of the element at or before the given property\n * @hidden\n */\nexport function search(array: any[], value: any, prop= \"ticks\"): number {\n\tlet beginning = 0;\n\tconst len = array.length;\n\tlet end = len;\n\tif (len > 0 && array[len - 1][prop] <= value) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tconst event = array[midPoint];\n\t\tconst nextEvent = array[midPoint + 1];\n\t\tif (event[prop] === value) {\n\t\t\t// choose the last one that has the same value\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\n\t\t\t\tconst testEvent = array[i];\n\t\t\t\tif (testEvent[prop] === value) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] > value) {\n\t\t\t// search lower\n\t\t\tend = midPoint;\n\t\t} else if (event[prop] < value) {\n\t\t\t// search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\n\tif (array.length) {\n\t\tconst index = search(array, event[prop], prop);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n","import {\n\tMidiControllerEvent,\n\tMidiEndOfTrackEvent,\n\tMidiNoteOffEvent,\n\tMidiNoteOnEvent,\n\tMidiPitchBendEvent,\n\tMidiTrackData,\n\tMidiTrackNameEvent,\n} from \"midi-file\";\nimport { insert } from \"./BinarySearch\";\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\n\nimport { Header } from \"./Header\";\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\n\nconst privateHeaderMap = new WeakMap<Track, Header>();\n\n/**\n * A Track is a collection of notes and controlChanges\n */\nexport class Track {\n\t/**\n\t * The name of the track\n\t */\n\tname = \"\";\n\n\t/**\n\t * The instrument associated with the track\n\t */\n\tinstrument: Instrument;\n\n\t/**\n\t * The track's note events\n\t */\n\tnotes: Note[] = [];\n\n\t/**\n\t * The channel number of the track. Applies this channel\n\t * to all events associated with the channel\n\t */\n\tchannel: number;\n\n\t/**\n\t * The control change events\n\t */\n\tcontrolChanges = createControlChanges();\n\n\t/**\n\t * The end of track event (if it exists) in ticks\n\t */\n\tendOfTrackTicks?: number;\n\n\t/**\n\t * The pitch bend events\n\t */\n\tpitchBends: PitchBend[] = [];\n\n\tconstructor(trackData: MidiTrackData, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tif (trackData) {\n\t\t\tconst nameEvent = trackData.find(\n\t\t\t\t(e) => e.type === \"trackName\"\n\t\t\t) as MidiTrackNameEvent;\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\n\t\t}\n\n\t\tthis.instrument = new Instrument(trackData, this);\n\n\t\t// defaults to 0\n\t\tthis.channel = 0;\n\n\t\tif (trackData) {\n\t\t\tconst noteOns = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOn\"\n\t\t\t) as MidiNoteOnEvent[];\n\t\t\tconst noteOffs = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOff\"\n\t\t\t) as MidiNoteOffEvent[];\n\t\t\twhile (noteOns.length) {\n\t\t\t\tconst currentNote = noteOns.shift();\n\t\t\t\t// set the channel based on the note\n\t\t\t\tthis.channel = currentNote.channel;\n\t\t\t\t// find the corresponding note off\n\t\t\t\tconst offIndex = noteOffs.findIndex(\n\t\t\t\t\t(note) =>\n\t\t\t\t\t\tnote.noteNumber === currentNote.noteNumber &&\n\t\t\t\t\t\tnote.absoluteTime >= currentNote.absoluteTime\n\t\t\t\t);\n\t\t\t\tif (offIndex !== -1) {\n\t\t\t\t\t// once it's got the note off, add it\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\n\t\t\t\t\tthis.addNote({\n\t\t\t\t\t\tdurationTicks:\n\t\t\t\t\t\t\tnoteOff.absoluteTime - currentNote.absoluteTime,\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst controlChanges = trackData.filter(\n\t\t\t\t(event) => event.type === \"controller\"\n\t\t\t) as MidiControllerEvent[];\n\t\t\tcontrolChanges.forEach((event) => {\n\t\t\t\tthis.addCC({\n\t\t\t\t\tnumber: event.controllerType,\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\tvalue: event.value / 127,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst pitchBends = trackData.filter(\n\t\t\t\t(event) => event.type === \"pitchBend\"\n\t\t\t) as MidiPitchBendEvent[];\n\t\t\tpitchBends.forEach((event) => {\n\t\t\t\tthis.addPitchBend({\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t// scale the value between -2^13 to 2^13 to -2 to 2\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst endOfTrackEvent:\n\t\t\t| MidiEndOfTrackEvent\n\t\t\t| undefined = trackData.find(\n\t\t\t\t(event): event is MidiEndOfTrackEvent =>\n\t\t\t\t\tevent.type === \"endOfTrack\"\n\t\t\t);\n\n\t\t\tthis.endOfTrackTicks =\n\t\t\t\tendOfTrackEvent !== undefined\n\t\t\t\t\t? endOfTrackEvent.absoluteTime\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Add a note to the notes array\n\t * @param props The note properties to add\n\t */\n\taddNote(props: NoteConstructorInterface): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst note = new Note(\n\t\t\t{\n\t\t\t\tmidi: 0,\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 0,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tObject.assign(note, props);\n\t\tinsert(this.notes, note, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t * @param props\n\t */\n\taddCC(\n\t\tprops:\n\t\t| Omit<ControlChangeInterface, \"ticks\">\n\t\t| Omit<ControlChangeInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst cc = new ControlChange(\n\t\t\t{\n\t\t\t\tcontrollerType: props.number,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tdelete props.number;\n\t\tObject.assign(cc, props);\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\n\t\t\tthis.controlChanges[cc.number] = [];\n\t\t}\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t */\n\taddPitchBend(\n\t\tprops:\n\t\t| Omit<PitchBendInterface, \"ticks\">\n\t\t| Omit<PitchBendInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst pb = new PitchBend({}, header);\n\t\tObject.assign(pb, props);\n\t\tinsert(this.pitchBends, pb, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * The end time of the last event in the track\n\t */\n\tget duration(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].time +\n\t\t\tthis.notes[this.notes.length - 1].duration;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].time + this.notes[i].duration;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * The end time of the last event in the track in ticks\n\t */\n\tget durationTicks(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].ticks +\n\t\t\tthis.notes[this.notes.length - 1].durationTicks;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * Assign the json values to this track\n\t */\n\tfromJSON(json: TrackJSON): void {\n\t\tthis.name = json.name;\n\t\tthis.channel = json.channel;\n\t\tthis.instrument = new Instrument(undefined, this);\n\t\tthis.instrument.fromJSON(json.instrument);\n\t\tif (json.endOfTrackTicks !== undefined) {\n\t\t\tthis.endOfTrackTicks = json.endOfTrackTicks;\n\t\t}\n\t\tfor (const number in json.controlChanges) {\n\t\t\tif (json.controlChanges[number]) {\n\t\t\t\tjson.controlChanges[number].forEach((cc) => {\n\t\t\t\t\tthis.addCC({\n\t\t\t\t\t\tnumber: cc.number,\n\t\t\t\t\t\tticks: cc.ticks,\n\t\t\t\t\t\tvalue: cc.value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tjson.notes.forEach((n) => {\n\t\t\tthis.addNote({\n\t\t\t\tdurationTicks: n.durationTicks,\n\t\t\t\tmidi: n.midi,\n\t\t\t\tticks: n.ticks,\n\t\t\t\tvelocity: n.velocity,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Convert the track into a JSON format\n\t */\n\ttoJSON(): TrackJSON {\n\t\t// convert all the CCs to JSON\n\t\tconst controlChanges = {};\n\t\tfor (let i = 0; i < 127; i++) {\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map((c) =>\n\t\t\t\t\tc.toJSON()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst json: TrackJSON = {\n\t\t\tchannel: this.channel,\n\t\t\tcontrolChanges,\n\t\t\tpitchBends: this.pitchBends.map((pb) => pb.toJSON()),\n\t\t\tinstrument: this.instrument.toJSON(),\n\t\t\tname: this.name,\n\t\t\tnotes: this.notes.map((n) => n.toJSON()),\n\t\t};\n\n\t\tif (this.endOfTrackTicks !== undefined) {\n\t\t\tjson.endOfTrackTicks = this.endOfTrackTicks;\n\t\t}\n\n\t\treturn json;\n\t}\n}\n\nexport interface TrackJSON {\n\tname: string;\n\tnotes: NoteJSON[];\n\tchannel: number;\n\tinstrument: InstrumentJSON;\n\tcontrolChanges: ControlChangesJSON;\n\tpitchBends: PitchBendJSON[];\n\tendOfTrackTicks?: number;\n}\n","import { Header } from \"./Header\";\nimport { MidiControllerEvent } from \"midi-file\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName = \"modulationWheel\" | \"breath\" | \"footController\" | \"portamentoTime\" | \"volume\" | \"balance\" | \"pan\" | \"sustain\" | \"portamentoTime\" | \"sostenuto\" | \"softPedal\" | \"legatoFootswitch\" | \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiChannelEvent, MidiTrackData, parseMidi } from \"midi-file\";\nimport { encode } from \"./Encode\";\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\n\n/**\n * The main midi parsing class\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated midi file\n\t * @param url The url to fetch\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`could not load ${url}`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\n\t\t// parse the midi data if there is any\n\t\tlet midiData = null;\n\t\tif (midiArray) {\n\t\t\tif (midiArray instanceof ArrayBuffer) {\n\t\t\t\tmidiArray = new Uint8Array(midiArray);\n\t\t\t}\n\t\t\tmidiData = parseMidi(midiArray);\n\n\t\t\t// add the absolute times to each of the tracks\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\t\t\t\ttrack.forEach(event => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// ensure at most one instrument per track\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// parse the midi data\n\t\tif (midiArray) {\n\t\t\t// format 0, everything is on the same track\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// if it's format 1 and there are no notes on the first track, remove it\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds\n\t */\n\tget duration(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks\n\t */\n\tget durationTicks(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the midi file\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the midi as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the midi object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object midi object\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: MidiTrackData[]): MidiTrackData[] {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as MidiChannelEvent).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","import { MidiPitchBendEvent, writeMidi } from \"midi-file\";\nimport { MidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiInstrumentEvent, MidiKeySignatureEvent, MidiNoteOffEvent,\n\tMidiNoteOnEvent, MidiTempoEvent, MidiTextEvent, MidiTimeSignatureEvent, MidiTrackNameEvent } from \"midi-file\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\nimport flatten from \"array-flatten\";\n\nfunction encodeNote(note: Note, channel: number): [MidiNoteOnEvent, MidiNoteOffEvent] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(cc: ControlChange, channel: number): MidiControllerEvent {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: Math.floor(cc.value * 127),\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(pb: PitchBend, channel: number): MidiPitchBendEvent {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): MidiInstrumentEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): MidiTrackNameEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): MidiTempoEvent {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): MidiTimeSignatureEvent {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): MidiKeySignatureEvent {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(textEvent: MetaEvent): MidiTextEvent {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as MidiTextEvent;\n}\n\n/**\n * Convert the midi object to an array\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// the name data\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// the remaining tracks\n\t\t\t...midi.tracks.map(track => {\n\t\t\t\treturn [\n\t\t\t\t\t// add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// sort and set deltaTime of all of the tracks\n\tmidiData.tracks = midiData.tracks.map(track => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\t\t// end of track\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as MidiEndOfTrackEvent);\n\t\treturn track;\n\t});\n\n\t// return midiData\n\treturn new Uint8Array(writeMidi(midiData));\n}\n","'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = flatten\nmodule.exports.from = flattenFrom\nmodule.exports.depth = flattenDepth\nmodule.exports.fromDepth = flattenFromDepth\n\n/**\n * Flatten an array.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flatten (array) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFrom(array)\n}\n\n/**\n * Flatten an array-like structure.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flattenFrom (array) {\n  return flattenDown(array, [])\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDepth (array, depth) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFromDepth(array, depth)\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenFromDepth (array, depth) {\n  if (typeof depth !== 'number') {\n    throw new TypeError('Expected the depth to be a number')\n  }\n\n  return flattenDownDepth(array, [], depth)\n}\n\n/**\n * Flatten an array indefinitely.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenDown (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDownDepth (array, result, depth) {\n  depth--\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > -1 && Array.isArray(value)) {\n      flattenDownDepth(value, result, depth)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n","import { controlChangeIds } from \"./ControlChange\";\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\n\nexport interface ControlChanges {\n\t[key: string]: ControlChange[];\n\t[key: number]: ControlChange[];\n}\n\nexport interface ControlChangesJSON {\n\t[key: string]: ControlChangeJSON[];\n\t[key: number]: ControlChangeJSON[];\n}\n\n/**\n * Automatically creates an alias for named control values using Proxies\n * @hidden\n */\nexport function createControlChanges(): ControlChanges {\n\treturn new Proxy({}, {\n\t\t// tslint:disable-next-line: typedef\n\t\tget(target, handler) {\n\t\t\tif (target[handler]) {\n\t\t\t\treturn target[handler];\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\treturn target[controlChangeIds[handler]];\n\t\t\t}\n\t\t},\n\t\t// tslint:disable-next-line: typedef\n\t\tset(target, handler, value) {\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\n\t\t\t} else {\n\t\t\t\ttarget[handler] = value;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t});\n}\n","import { Header } from \"./Header\";\nimport { MidiPitchBendEvent } from \"midi-file\";\n\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\n\n/**\n * Represents a pitch bend event\n */\nexport class PitchBend implements PitchBendInterface {\n\n\t/**\n\t * The pitch value from...\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiPitchBendEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): PitchBendJSON {\n\t\treturn {\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface PitchBendJSON {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface PitchBendInterface {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiInstrumentEvent, MidiTrackData } from \"midi-file\";\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the midi instrument of a track\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiTrackData, track: Track) {\n\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(e => e.type === \"programChange\") as MidiInstrumentEvent;\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tname: this.name,\n\t\t\tnumber: this.number,\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tnumber: number;\n\tname: string;\n\tfamily: string;\n}\n","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n];\n\nexport const InstrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"world\",\n\t\"percussive\",\n\t\"sound effects\",\n];\n\nexport const DrumKitByPatchID = {\n\t0: \"standard kit\",\n\t8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n};\n","import { MidiNoteEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * Convert a midi note into a pitch\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a noteOn and noteOff event\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes midi value\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1)\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\"\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\"\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n"],"sourceRoot":""}